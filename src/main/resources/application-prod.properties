spring.application.name=fleetIq

# Configuracion para PRODUCCION en Render
# Base de datos PostgreSQL (usando variables de entorno)
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# Server configuration (Render asigna el puerto automaticamente)
server.port=${PORT:8080}
server.servlet.context-path=/

# JWT usando variables de entorno para seguridad
jwt.secret=${JWT_SECRET:mi_clave_secreta_super_segura_para_jwt_que_debe_tener_al_menos_32_caracteres_para_ser_segura}

# Email configuration (variables de entorno)
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# Frontend URL
app.frontend.url=${FRONTEND_URL:https://tu-frontend.onrender.com}

# Logging optimizado para produccion
logging.level.root=WARN
logging.level.com.example.fleetIq=INFO

# Optimizaciones para produccion
spring.jpa.open-in-view=false
spring.devtools.restart.enabled=false
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
