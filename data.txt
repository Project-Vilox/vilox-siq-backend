=== ARCHIVO: java\com\example\fleetIq\FleetIqApplication.java ===

package com.example.fleetIq;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class FleetIqApplication {
	public static void main(String[] args) {
		SpringApplication.run(FleetIqApplication.class, args);
	}
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\ServletInitializer.java ===

package com.example.fleetIq;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;

public class ServletInitializer extends SpringBootServletInitializer {

	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(FleetIqApplication.class);
	}

}

============================================================

=== ARCHIVO: java\com\example\fleetIq\TestAuth.java ===

package com.example.fleetIq;


import com.example.fleetIq.api.Protrack365ApiClient;
import com.example.fleetIq.model.AuthResponse;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;

public class TestAuth {
    private static final String API_BASE_URI = "http://api.protrack365.com";
    private static final String AUTH_ENDPOINT = "/api/authorization";
    private static final String ACCOUNT = "expertsac";
    private static final String PASSWORD = "expert2023";

    // Utility method to calculate MD5 hash
    private static String calculateMD5(String input) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] digest = md.digest(input.getBytes("UTF-8"));
        StringBuilder sb = new StringBuilder();
        for (byte b : digest) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    public static String getAccessToken() throws Exception {
        // Generate current Unix timestamp
        long time = System.currentTimeMillis() / 1000L;

        // Calculate signature: md5(md5(password) + time)
        String md5Password = calculateMD5(PASSWORD);
        String signatureInput = md5Password + time;
        String signature = calculateMD5(signatureInput);

        // Construct the URL with query parameters
        String urlString = String.format("%s%s?time=%d&account=%s&signature=%s",
                API_BASE_URI, AUTH_ENDPOINT, time, ACCOUNT, signature);
        URL url = new URL(urlString);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        // Set the request method and properties
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Accept", "application/json");

        // Read the response
        int responseCode = conn.getResponseCode();
        StringBuilder response = new StringBuilder();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }
        } else {
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream(), "UTF-8"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
            }
            throw new RuntimeException("HTTP error code: " + responseCode + ", Response: " + response.toString());
        }

        // Parse the JSON response
        JSONObject jsonResponse = new JSONObject(response.toString());
        int code = jsonResponse.getInt("code");
        if (code != 0) {
            String message = jsonResponse.optString("message", "No message provided");
            throw new RuntimeException("API error: code=" + code + ", message=" + message);
        }

        // Extract access token from nested "record" object
        JSONObject record = jsonResponse.getJSONObject("record");
        String accessToken = record.getString("access_token");
        int expiresIn = record.getInt("expires_in");
        System.out.println("Access Token: " + accessToken);
        System.out.println("Expires In: " + expiresIn + " seconds");

        return accessToken;
    }

    public static void main(String[] args) {
        try {
            String token = getAccessToken();
            System.out.println("Successfully retrieved access token: " + token);
        } catch (Exception e) {
            System.err.println("Error retrieving access token: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\api\Protrack365ApiClient.java ===

package com.example.fleetIq.api;

import com.example.fleetIq.config.ApiConfig;
import com.example.fleetIq.model.AuthResponse;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class Protrack365ApiClient {

    public AuthResponse authenticate() throws Exception {
        URL url = new URL(ApiConfig.API_BASE_URI + ApiConfig.LOGIN_ENDPOINT);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        configureConnection(conn);
        sendRequest(conn);

        String response = readResponse(conn);
        return parseAuthResponse(response);
    }

    private void configureConnection(HttpURLConnection conn) throws Exception {
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
        conn.setRequestProperty("Accept", "application/json");
        conn.setDoOutput(true);
    }

    private void sendRequest(HttpURLConnection conn) throws Exception {
        JSONObject payload = new JSONObject();
        payload.put("account", ApiConfig.ACCOUNT);
        payload.put("password", ApiConfig.PASSWORD);

        try (OutputStream os = conn.getOutputStream()) {
            byte[] input = payload.toString().getBytes("UTF-8");
            os.write(input, 0, input.length);
        }
    }

    private String readResponse(HttpURLConnection conn) throws Exception {
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK) {
            throw new RuntimeException("Failed to get access token. HTTP error code: " + responseCode);
        }

        StringBuilder response = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"))) {
            String line;
            while ((line = br.readLine()) != null) {
                response.append(line);
            }
        }
        return response.toString();
    }

    private AuthResponse parseAuthResponse(String jsonResponse) {
        JSONObject jsonObject = new JSONObject(jsonResponse);
        String accessToken = jsonObject.getString("access_token");
        int expiresIn = jsonObject.getInt("expires_in");

        System.out.println("Access Token: " + accessToken);
        System.out.println("Expires In: " + expiresIn + " seconds");

        return new AuthResponse(accessToken, expiresIn);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\config\ApiConfig.java ===

package com.example.fleetIq.config;


public class ApiConfig {
    public static final String API_BASE_URI = "http://api.protrack365.com";
    public static final String LOGIN_ENDPOINT = "/api/login";
    public static final String ACCOUNT = "expertsac";
    public static final String PASSWORD = "expert2023";

    private ApiConfig() {
        // Clase de utilidad, no instanciable
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\config\WebConfig.java ===

package com.example.fleetIq.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**")
                .allowedOrigins("http://localhost:8080", "https://09de1313a4b4.ngrok-free.app", "http://localhost:3000","https://s925b4gn-3000.brs.devtunnels.ms",
                        "https://vilox.pe.allmundotech.com","http://localhost:63342","https://geotrack.pe.allmundotech.com/")
                .allowedMethods("GET", "POST", "PUT", "DELETE")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\AlarmController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.model.Alarm;
import com.example.fleetIq.model.Track;
import com.example.fleetIq.service.AlarmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

@RestController
@RequestMapping("/api")
public class AlarmController {

    @Autowired
    private AlarmService alarmService;

    @PostMapping("/alarms/check")
    public ResponseEntity<String> checkAndLogAlarm(@RequestBody Track track) {
        try {
            alarmService.checkAndLogAlarm(track);
            return ResponseEntity.ok("Alarm check completed");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error checking alarm: " + e.getMessage());
        }
    }

    @GetMapping("/alarms")
    public List<Alarm> getAlarms(
            @RequestParam(required = false) String imei,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDateTime,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDateTime) {

        Long startTimestamp = startDateTime != null ? startDateTime.atZone(ZoneId.of("America/Lima")).toEpochSecond() : null;
        Long endTimestamp = endDateTime != null ? endDateTime.atZone(ZoneId.of("America/Lima")).toEpochSecond() : null;

        return alarmService.findAlarmsByFilters(imei, startTimestamp, endTimestamp);
    }



}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\DeviceController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.model.Device;
import com.example.fleetIq.service.DeviceService; // Asegúrate de tener este servicio
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = {"http://localhost:8080", "http://446ae7f42f09.ngrok-free.app"})
public class DeviceController {

    @Autowired
    private DeviceService deviceService; // Asegúrate de implementar DeviceService

    @GetMapping("/devices")
    public List<Device> getDevices() {
        return deviceService.getAllDevices();
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\EstablecimientoController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.dto.EstablecimientoDto;
import com.example.fleetIq.service.EstablecimientoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/establecimientos")
public class EstablecimientoController {

    @Autowired
    private EstablecimientoService establecimientoService;

    @GetMapping
    public ResponseEntity<List<EstablecimientoDto>> getAllEstablecimientos() {
        List<EstablecimientoDto> establecimientos = establecimientoService.getAllEstablecimientos();
        return ResponseEntity.ok(establecimientos);
    }

    @GetMapping("/empresa/{empresaId}")
    public ResponseEntity<List<EstablecimientoDto>> getEstablecimientosByEmpresa(
            @PathVariable String empresaId) {
        List<EstablecimientoDto> establecimientos = establecimientoService.getEstablecimientosByEmpresa(empresaId);
        return ResponseEntity.ok(establecimientos);
    }

    @GetMapping("/tipo/{tipo}")
    public ResponseEntity<List<EstablecimientoDto>> getEstablecimientosByTipo(
            @PathVariable String tipo) {
        List<EstablecimientoDto> establecimientos = establecimientoService.getEstablecimientosByTipo(tipo);
        return ResponseEntity.ok(establecimientos);
    }

    @GetMapping("/publicos")
    public ResponseEntity<List<EstablecimientoDto>> getEstablecimientosPublicos() {
        List<EstablecimientoDto> establecimientos = establecimientoService.getEstablecimientosPublicos();
        return ResponseEntity.ok(establecimientos);
    }

    @GetMapping("/{id}")
    public ResponseEntity<EstablecimientoDto> getEstablecimientoById(
            @PathVariable String id) {
        EstablecimientoDto establecimiento = establecimientoService.getEstablecimientoById(id);
        if (establecimiento == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(establecimiento);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\GeofenceController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.model.Geofence;
import com.example.fleetIq.service.GeofenceService;
import com.example.fleetIq.repository.GeofenceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = {"http://localhost:8080", "https://446ae7f42f09.ngrok-free.app"
,"https://923cc1cddf51.ngrok-free.app/"}, methods = {RequestMethod.GET, RequestMethod.POST})
public class GeofenceController {

    @Autowired
    private GeofenceService geofenceService;

    @Autowired
    private GeofenceRepository geofenceRepository;

    @PostMapping("/geofences")
    public ResponseEntity<String> createGeofence(@RequestBody Geofence geofence) {
        try {
            geofenceService.createGeofence(geofence);
            return ResponseEntity.ok("Geofence created successfully");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error creating geofence: " + e.getMessage());
        }
    }

    @GetMapping("/geofences")
    public List<Geofence> getGeofences() {
        return geofenceRepository.findAll();
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\HistoricalTrackController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.service.HistoricalTrackService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.time.Instant;

@RestController
@RequestMapping("/api/historical")
public class HistoricalTrackController {

    @Autowired
    private HistoricalTrackService historicalTrackService;

    @GetMapping("/fetch-tracks")
    public String fetchAndSaveHistoricalTracks(
            @RequestParam(required = false) Long beginTime,
            @RequestParam(required = false) Long endTime) {
        try {
            if (beginTime == null) {
                beginTime = Instant.now().getEpochSecond() - 24 * 60 * 60; // Últimas 24 horas por defecto
            }
            if (endTime == null) {
                endTime = Instant.now().getEpochSecond();
            }
            historicalTrackService.fetchAndSaveHistoricalTracks(beginTime, endTime);
            return "Tracks históricos cargados exitosamente en historical_track";
        } catch (Exception e) {
            return "Error al cargar tracks históricos: " + e.getMessage();
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\HistoricalTrackQueryController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.model.HistoricalTrack;
import com.example.fleetIq.repository.HistoricalTrackRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/historical")
public class HistoricalTrackQueryController {

    @Autowired
    private HistoricalTrackRepository historicalTrackRepository;

    @GetMapping("/tracks")
    public List<HistoricalTrack> getHistoricalTracks(
            @RequestParam String imei,
            @RequestParam(required = false) Long beginTime,
            @RequestParam(required = false) Long endTime) {
        if (beginTime == null) {
            beginTime = 0L; // Desde el inicio si no se especifica
        }
        if (endTime == null) {
            endTime = System.currentTimeMillis() / 1000; // Hasta ahora
        }
        return historicalTrackRepository.findByImeiAndTimeBetween(imei, beginTime, endTime);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\OperadorLogisticoController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.dto.OperadorLogisticoInfoResponse;
import com.example.fleetIq.service.OperadorLogisticoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/operador-logistico")
public class OperadorLogisticoController {

    @Autowired
    private OperadorLogisticoService operadorLogisticoService;

    @GetMapping("/{id}")
    public ResponseEntity<OperadorLogisticoInfoResponse> getOperadorLogisticoInfo(
            @PathVariable String id,
            @RequestParam String tipoEmpresa) {

        // Verificar que tipoEmpresa es 'operador_logistico'
        if (!"operador_logistico".equals(tipoEmpresa)) {
            return ResponseEntity.badRequest().build();
        }

        OperadorLogisticoInfoResponse response = operadorLogisticoService.getOperadorLogisticoInfo(id);
        if (response == null) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok(response);
    }

    @GetMapping("/listarOperadores")
    public ResponseEntity<OperadorLogisticoInfoResponse> listarOperadores(
            @RequestParam String id_empresa,
            @RequestParam String tipoEmpresa) {

        // Verificar que tipoEmpresa es 'operador_logistico'
        if (!"operador_logistico".equals(tipoEmpresa)) {
            return ResponseEntity.badRequest().build();
        }

        OperadorLogisticoInfoResponse response = operadorLogisticoService.listarOperadores(id_empresa);
        if (response == null) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok(response);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\TableController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.service.TableDataService;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@CrossOrigin(origins = "https://923cc1cddf51.ngrok-free.app") // Ajusta si la URL de ngrok cambia
public class TableController {
    private final TableDataService tableDataService;

    public TableController(TableDataService tableDataService) {
        this.tableDataService = tableDataService;
    }

    @GetMapping("/tables")
    public String showTables() {
        return "forward:/web/vertablas.html";
    }

    @GetMapping("/query")
    public String showQueryPage() {
        return "forward:/web/query.html"; // Mantener para la página de queries original si sigue en uso
    }

    @GetMapping("/api/tables/data")
    public Map<String, Object> getTableData(@RequestParam(value = "tableName", required = false) String tableName,
                                            @RequestParam(value = "page", defaultValue = "0") int page,
                                            @RequestParam(value = "size", defaultValue = "50") int size) {
        Map<String, Object> response = new HashMap<>();
        response.put("tables", tableDataService.getAllTables());
        if (tableName != null && !tableName.isEmpty()) {
            try {
                response.put("data", tableDataService.getTableData(tableName, page, size));
                response.put("tableName", tableName);
                response.put("total", tableDataService.getTotalRows(tableName));
                response.put("page", page);
                response.put("size", size);
            } catch (Exception e) {
                response.put("error", e.getMessage());
            }
        }
        return response;
    }

    // Endpoint para ejecutar query SQL personalizado (usado por vertablas.html y query.html)
    @PostMapping("/api/query/execute")
    public ResponseEntity<Map<String, Object>> executeCustomQuery(@RequestBody Map<String, String> request) {
        String sql = request.get("query");
        if (sql == null || sql.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "Query requerido"));
        }
        try {
            List<Map<String, Object>> data = tableDataService.executeQuery(sql);
            Map<String, Object> response = new HashMap<>();
            response.put("data", data);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        }
    }

    @GetMapping("/api/tables/export")
    public void exportTableData(@RequestParam("tableName") String tableName, HttpServletResponse response) throws IOException {
        System.out.println("Iniciando exportación de tabla: " + tableName);
        if (!tableDataService.getAllTables().contains(tableName.toLowerCase())) {
            throw new IllegalArgumentException("Tabla inválida");
        }

        List<Map<String, Object>> data = tableDataService.getAllTableData(tableName);
        System.out.println("Datos recuperados: " + data.size() + " registros");
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Datos");

        Row headerRow = sheet.createRow(0);
        if (!data.isEmpty()) {
            Map<String, Object> firstRow = data.get(0);
            int columnIndex = 0;
            for (String columnName : firstRow.keySet()) {
                Cell cell = headerRow.createCell(columnIndex++);
                cell.setCellValue(columnName);
            }
        }

        int rowIndex = 1;
        for (Map<String, Object> rowData : data) {
            Row dataRow = sheet.createRow(rowIndex++);
            int columnIndex = 0;
            for (Object value : rowData.values()) {
                Cell cell = dataRow.createCell(columnIndex++);
                if (value != null) {
                    cell.setCellValue(value.toString());
                }
            }
        }

        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        response.setHeader("Content-Disposition", "attachment; filename=" + tableName + "_data.xlsx");
        workbook.write(response.getOutputStream());
        workbook.close();
        System.out.println("Exportación completada");
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\TrackController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.model.Track;
import com.example.fleetIq.service.TrackService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/tracks")
public class TrackController {

    @Autowired
    private TrackService trackService;

    @GetMapping("/fetch")
    public String fetchAndSaveTracks(
            @RequestParam(required = false) Long beginTime,
            @RequestParam(required = false) Long endTime) {
        try {
            if (beginTime == null) {
                beginTime = System.currentTimeMillis() / 1000 - 24 * 60 * 60; // Últimas 24 horas
            }
            if (endTime == null) {
                endTime = System.currentTimeMillis() / 1000; // Hasta ahora
            }
            trackService.fetchAndSaveTracks(beginTime, endTime);
            return "Tracks cargados exitosamente en tracks";
        } catch (Exception e) {
            return "Error al cargar tracks: " + e.getMessage();
        }
    }

    @GetMapping
    public List<Track> getTracks(
            @RequestParam String imei,
            @RequestParam(required = false) Long beginTime,
            @RequestParam(required = false) Long endTime) {
        if (beginTime == null) {
            beginTime = 0L; // Desde el inicio si no se especifica
        }
        if (endTime == null) {
            endTime = System.currentTimeMillis() / 1000; // Hasta ahora
        }
        return trackService.getTracksByImei(imei, beginTime, endTime);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\TramoController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.dto.TramoDto;
import com.example.fleetIq.service.TramoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/tramos")
@CrossOrigin(origins = "https://923cc1cddf51.ngrok-free.app")
public class TramoController {

    @Autowired
    private TramoService tramoService;

    @GetMapping("/viaje/{viajeId}")
    public ResponseEntity<List<TramoDto>> listarTramosPorViaje(@PathVariable String viajeId) {
        try {
            List<TramoDto> tramos = tramoService.listarTramosPorViaje(viajeId);
            return ResponseEntity.ok(tramos);
        } catch (Exception e) {
            System.err.println("Error al listar tramos por viaje: " + e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @PostMapping
    public ResponseEntity<Void> crearTramo(@RequestBody TramoDto tramoDto) {
        try {
            tramoService.crearTramo(tramoDto);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            System.err.println("Error al crear tramo: " + e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\TransportistaController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.dto.TransportistaInfoResponse;
import com.example.fleetIq.service.TransportistaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/transportista")
public class TransportistaController {

    @Autowired
    private TransportistaService transportistaService;

    @GetMapping("/{id}")
    public ResponseEntity<TransportistaInfoResponse> getTransportistaInfo(
            @PathVariable String id,
            @RequestParam String tipoEmpresa) {

        // Verify tipoEmpresa is 'transportista'
        if (!"transportista".equals(tipoEmpresa)) {
            return ResponseEntity.badRequest().build();
        }

        TransportistaInfoResponse response = transportistaService.getTransportistaInfo(id);
        if (response == null) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok(response);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\controller\ViajeController.java ===

package com.example.fleetIq.controller;

import com.example.fleetIq.dto.ViajeDto;
import com.example.fleetIq.model.Viaje;
import com.example.fleetIq.service.ViajeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

// [ACTUALIZADO] Importaciones nuevas para paginación
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

@RestController
@RequestMapping("/api/viajes")
@CrossOrigin(origins = "https://923cc1cddf51.ngrok-free.app")
public class ViajeController {

    @Autowired
    private ViajeService viajeService;

    @PostMapping
    public ResponseEntity<Void> guardarViaje(@RequestBody Viaje viaje) {
        try {
            viajeService.guardarViaje(viaje);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            System.err.println("Error al guardar viaje: " + e.getMessage());
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping
    public ResponseEntity<List<ViajeDto>> listarTodosLosViajes() {
        try {
            List<ViajeDto> viajes = viajeService.listarTodosLosViajes();
            return ResponseEntity.ok(viajes);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/paginado")
    public ResponseEntity<Page<Viaje>> listarTodosLosViajesPaginado(Pageable pageable) {
        try {
            Page<Viaje> viajes = viajeService.listarTodosLosViajesPaginado(pageable);
            return ResponseEntity.ok(viajes);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    // [ACTUALIZADO] Endpoint actualizado para usar DTO
    @GetMapping("/codigo/{codigoViaje}")
    public ResponseEntity<List<ViajeDto>> listarViajesPorCodigo(@PathVariable String codigoViaje) {
        try {
            List<ViajeDto> viajes = viajeService.listarViajesPorCodigo(codigoViaje);
            return ResponseEntity.ok(viajes);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/empresa/{empresaId}")
    public ResponseEntity<List<ViajeDto>> listarViajesPorEmpresa(@PathVariable String empresaId) {
        try {
            List<ViajeDto> viajes = viajeService.listarViajesPorEmpresa(empresaId);
            return ResponseEntity.ok(viajes);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\CamionDto.java ===

package com.example.fleetIq.dto;

import java.math.BigDecimal;
import java.util.Objects;

public class CamionDto {
    private String placa;
    private String marca;
    private String modelo;
    private Integer ano;
    private BigDecimal capacidadToneladas;
    private String estado;

    public CamionDto() {}

    public CamionDto(String placa, String marca, String modelo, Integer ano, BigDecimal capacidadToneladas, String estado) {
        this.placa = placa;
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
        this.capacidadToneladas = capacidadToneladas;
        this.estado = estado;
    }

    // Getters y setters
    public String getPlaca() { return placa; }
    public void setPlaca(String placa) { this.placa = placa; }

    public String getMarca() { return marca; }
    public void setMarca(String marca) { this.marca = marca; }

    public String getModelo() { return modelo; }
    public void setModelo(String modelo) { this.modelo = modelo; }

    public Integer getAno() { return ano; }
    public void setAno(Integer ano) { this.ano = ano; }

    public BigDecimal getCapacidadToneladas() { return capacidadToneladas; }
    public void setCapacidadToneladas(BigDecimal capacidadToneladas) { this.capacidadToneladas = capacidadToneladas; }

    public String getEstado() { return estado; }
    public void setEstado(String estado) { this.estado = estado; }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CamionDto camionDto = (CamionDto) o;
        return Objects.equals(placa, camionDto.placa);
    }

    @Override
    public int hashCode() {
        return Objects.hash(placa);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\ChoferDto.java ===

package com.example.fleetIq.dto;

import java.time.LocalDate;
import java.util.Objects;

public class ChoferDto {
    private String dni;
    private String nombre;
    private String apellidos;
    private String telefono;
    private String email;
    private String licenciaNumero;
    private String licenciaCategoria;
    private LocalDate licenciaVencimiento;

    public ChoferDto() {}

    public ChoferDto(String dni, String nombre, String apellidos, String telefono, String email,
                     String licenciaNumero, String licenciaCategoria, LocalDate licenciaVencimiento) {
        this.dni = dni;
        this.nombre = nombre;
        this.apellidos = apellidos;
        this.telefono = telefono;
        this.email = email;
        this.licenciaNumero = licenciaNumero;
        this.licenciaCategoria = licenciaCategoria;
        this.licenciaVencimiento = licenciaVencimiento;
    }

    // Getters y setters
    public String getDni() { return dni; }
    public void setDni(String dni) { this.dni = dni; }

    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }

    public String getApellidos() { return apellidos; }
    public void setApellidos(String apellidos) { this.apellidos = apellidos; }

    public String getTelefono() { return telefono; }
    public void setTelefono(String telefono) { this.telefono = telefono; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getLicenciaNumero() { return licenciaNumero; }
    public void setLicenciaNumero(String licenciaNumero) { this.licenciaNumero = licenciaNumero; }

    public String getLicenciaCategoria() { return licenciaCategoria; }
    public void setLicenciaCategoria(String licenciaCategoria) { this.licenciaCategoria = licenciaCategoria; }

    public LocalDate getLicenciaVencimiento() { return licenciaVencimiento; }
    public void setLicenciaVencimiento(LocalDate licenciaVencimiento) { this.licenciaVencimiento = licenciaVencimiento; }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ChoferDto choferDto = (ChoferDto) o;
        return Objects.equals(dni, choferDto.dni);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dni);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\ClienteDto.java ===

package com.example.fleetIq.dto;

import java.util.Objects;

public class ClienteDto {
    private String clienteId;
    private String clienteNombre;
    private String clienteRuc;

    public ClienteDto() {}

    public ClienteDto(String clienteId, String clienteNombre, String clienteRuc) {
        this.clienteId = clienteId;
        this.clienteNombre = clienteNombre;
        this.clienteRuc = clienteRuc;
    }

    // Getters and setters
    public String getClienteId() { return clienteId; }
    public void setClienteId(String clienteId) { this.clienteId = clienteId; }

    public String getClienteNombre() { return clienteNombre; }
    public void setClienteNombre(String clienteNombre) { this.clienteNombre = clienteNombre; }

    public String getClienteRuc() { return clienteRuc; }
    public void setClienteRuc(String clienteRuc) { this.clienteRuc = clienteRuc; }

    // ¡IMPORTANTE! Para que distinct() funcione
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ClienteDto that = (ClienteDto) o;
        return Objects.equals(clienteId, that.clienteId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(clienteId);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\EmpresaDto.java ===

package com.example.fleetIq.dto;

public class EmpresaDto {
    private String empresaId;
    private String empresaNombre;
    private String tipoEmpresa;
    private String ruc;

    public EmpresaDto() {}

    public EmpresaDto(String empresaId, String empresaNombre, String tipoEmpresa, String ruc) {
        this.empresaId = empresaId;
        this.empresaNombre = empresaNombre;
        this.tipoEmpresa = tipoEmpresa;
        this.ruc = ruc;
    }

    // Getters y setters
    public String getEmpresaId() { return empresaId; }
    public void setEmpresaId(String empresaId) { this.empresaId = empresaId; }

    public String getEmpresaNombre() { return empresaNombre; }
    public void setEmpresaNombre(String empresaNombre) { this.empresaNombre = empresaNombre; }

    public String getTipoEmpresa() { return tipoEmpresa; }
    public void setTipoEmpresa(String tipoEmpresa) { this.tipoEmpresa = tipoEmpresa; }

    public String getRuc() { return ruc; }
    public void setRuc(String ruc) { this.ruc = ruc; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\EstablecimientoDto.java ===

package com.example.fleetIq.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.time.LocalDateTime;

public class EstablecimientoDto {
    private String id;
    private String empresaId;
    private String nombre;
    private String tipo;
    private String direccion;
    private BigDecimal latitud;
    private BigDecimal longitud;
    private Boolean publico;
    private Boolean activo;

    @JsonProperty("configuracion_sla")
    private Object configuracionSla;

    @JsonProperty("fecha_creacion")
    private LocalDateTime fechaCreacion;

    public EstablecimientoDto(String id, String empresaId, String nombre, String tipo,
                              String direccion, BigDecimal latitud, BigDecimal longitud,
                              Boolean publico, Boolean activo, Object configuracionSla,
                              LocalDateTime fechaCreacion) {
        this.id = id;
        this.empresaId = empresaId;
        this.nombre = nombre;
        this.tipo = tipo;
        this.direccion = direccion;
        this.latitud = latitud;
        this.longitud = longitud;
        this.publico = publico;
        this.activo = activo;
        this.configuracionSla = configuracionSla;
        this.fechaCreacion = fechaCreacion;
    }

    // Getters
    public String getId() { return id; }
    public String getEmpresaId() { return empresaId; }
    public String getNombre() { return nombre; }
    public String getTipo() { return tipo; }
    public String getDireccion() { return direccion; }
    public BigDecimal getLatitud() { return latitud; }
    public BigDecimal getLongitud() { return longitud; }
    public Boolean getPublico() { return publico; }
    public Boolean getActivo() { return activo; }
    public Object getConfiguracionSla() { return configuracionSla; }
    public LocalDateTime getFechaCreacion() { return fechaCreacion; }

    // Setters
    public void setId(String id) { this.id = id; }
    public void setEmpresaId(String empresaId) { this.empresaId = empresaId; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    public void setTipo(String tipo) { this.tipo = tipo; }
    public void setDireccion(String direccion) { this.direccion = direccion; }
    public void setLatitud(BigDecimal latitud) { this.latitud = latitud; }
    public void setLongitud(BigDecimal longitud) { this.longitud = longitud; }
    public void setPublico(Boolean publico) { this.publico = publico; }
    public void setActivo(Boolean activo) { this.activo = activo; }
    public void setConfiguracionSla(Object configuracionSla) { this.configuracionSla = configuracionSla; }
    public void setFechaCreacion(LocalDateTime fechaCreacion) { this.fechaCreacion = fechaCreacion; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\OperadorClienteDto.java ===

package com.example.fleetIq.dto;

// OperadorClienteDto (for query)
public class OperadorClienteDto {
    private String operadorNombre;
    private String clienteNombre;

    public OperadorClienteDto(String operadorNombre, String clienteNombre) {
        this.operadorNombre = operadorNombre;
        this.clienteNombre = clienteNombre;
    }

    public String getOperadorNombre() { return operadorNombre; }
    public void setOperadorNombre(String operadorNombre) { this.operadorNombre = operadorNombre; }
    public String getClienteNombre() { return clienteNombre; }
    public void setClienteNombre(String clienteNombre) { this.clienteNombre = clienteNombre; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\OperadorClientesDto.java ===

package com.example.fleetIq.dto;
import java.util.List;

// OperadorClientesDto
public class OperadorClientesDto {
    private String operador;
    private List<String> clientes;

    public OperadorClientesDto(String operador, List<String> clientes) {
        this.operador = operador;
        this.clientes = clientes;
    }

    // Getters and setters
    public String getOperador() { return operador; }
    public void setOperador(String operador) { this.operador = operador; }
    public List<String> getClientes() { return clientes; }
    public void setClientes(List<String> clientes) { this.clientes = clientes; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\OperadorLogisticoInfoResponse.java ===

package com.example.fleetIq.dto;

import java.util.List;

public class OperadorLogisticoInfoResponse {
    private EmpresaDto operadorLogistico;
    private EmpresaDto empresaAdministradora; // Nuevo campo
    private List<CamionDto> camiones;
    private List<ChoferDto> choferes;
    private List<ClienteDto> clientes;

    // Constructor
    public OperadorLogisticoInfoResponse(EmpresaDto operadorLogistico,
                                         EmpresaDto empresaAdministradora,
                                         List<CamionDto> camiones,
                                         List<ChoferDto> choferes,
                                         List<ClienteDto> clientes) {
        this.operadorLogistico = operadorLogistico;
        this.empresaAdministradora = empresaAdministradora;
        this.camiones = camiones;
        this.choferes = choferes;
        this.clientes = clientes;
    }

    // Getters y setters
    public EmpresaDto getOperadorLogistico() { return operadorLogistico; }
    public void setOperadorLogistico(EmpresaDto operadorLogistico) { this.operadorLogistico = operadorLogistico; }

    public EmpresaDto getEmpresaAdministradora() { return empresaAdministradora; }
    public void setEmpresaAdministradora(EmpresaDto empresaAdministradora) { this.empresaAdministradora = empresaAdministradora; }

    public List<CamionDto> getCamiones() { return camiones; }
    public void setCamiones(List<CamionDto> camiones) { this.camiones = camiones; }

    public List<ChoferDto> getChoferes() { return choferes; }
    public void setChoferes(List<ChoferDto> choferes) { this.choferes = choferes; }

    public List<ClienteDto> getClientes() { return clientes; }
    public void setClientes(List<ClienteDto> clientes) { this.clientes = clientes; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\OperadorLogisticosDto.java ===

package com.example.fleetIq.dto;

import java.util.List;

public class OperadorLogisticosDto {
    private String operadorId;
    private String operadorNombre;
    private List<ClienteDto> clientes;

    public OperadorLogisticosDto() {}

    public OperadorLogisticosDto(String operadorId, String operadorNombre, List<ClienteDto> clientes) {
        this.operadorId = operadorId;
        this.operadorNombre = operadorNombre;
        this.clientes = clientes;
    }

    // Getters and setters
    public String getOperadorId() { return operadorId; }
    public void setOperadorId(String operadorId) { this.operadorId = operadorId; }

    public String getOperadorNombre() { return operadorNombre; }
    public void setOperadorNombre(String operadorNombre) { this.operadorNombre = operadorNombre; }

    public List<ClienteDto> getClientes() { return clientes; }
    public void setClientes(List<ClienteDto> clientes) { this.clientes = clientes; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\TramoDto.java ===

package com.example.fleetIq.dto;

import lombok.Data;

import java.time.LocalDateTime;

@Data
public class TramoDto {
    private String id;
    private String viajeId;
    private Integer orden;
    private String establecimientoOrigenId;
    private String establecimientoDestinoId;
    private String tipoActividad;
    private String descripcion;
    private LocalDateTime horaLlegadaProgramada;
    private LocalDateTime horaSalidaProgramada;
    private LocalDateTime horaLlegadaReal;
    private LocalDateTime horaSalidaReal;
    private String estado;
    private Integer slaMinutos;
    private String observaciones;
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\TransportistaDto.java ===

package com.example.fleetIq.dto;

import java.util.List;

public class TransportistaDto {
    private String transportistaId;
    private String transportistaNombre;
    private String ruc;
    private List<CamionDto> camiones;
    private List<ChoferDto> choferes;

    public TransportistaDto() {}

    public TransportistaDto(String transportistaId, String transportistaNombre, String ruc, List<CamionDto> camiones, List<ChoferDto> choferes) {
        this.transportistaId = transportistaId;
        this.transportistaNombre = transportistaNombre;
        this.ruc = ruc;
        this.camiones = camiones;
        this.choferes = choferes;
    }

    // Getters y setters
    public String getTransportistaId() { return transportistaId; }
    public void setTransportistaId(String transportistaId) { this.transportistaId = transportistaId; }

    public String getTransportistaNombre() { return transportistaNombre; }
    public void setTransportistaNombre(String transportistaNombre) { this.transportistaNombre = transportistaNombre; }

    public String getRuc() { return ruc; }
    public void setRuc(String ruc) { this.ruc = ruc; }

    public List<CamionDto> getCamiones() { return camiones; }
    public void setCamiones(List<CamionDto> camiones) { this.camiones = camiones; }

    public List<ChoferDto> getChoferes() { return choferes; }
    public void setChoferes(List<ChoferDto> choferes) { this.choferes = choferes; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\TransportistaInfoResponse.java ===

package com.example.fleetIq.dto;

import java.util.List;

public class TransportistaInfoResponse {
    private String empresaId;
    private String empresaNombre;
    private String tipoEmpresa;
    private String ruc;
    private List<CamionDto> camiones;
    private List<ChoferDto> choferes;
    private List<OperadorLogisticosDto> operadoresLogisticos;

    public TransportistaInfoResponse() {
        // Constructor vacío para JPA
    }

    public TransportistaInfoResponse(String empresaId, String empresaNombre, String tipoEmpresa, String ruc,
                                     List<CamionDto> camiones, List<ChoferDto> choferes, List<OperadorLogisticosDto> operadoresLogisticos) {
        this.empresaId = empresaId;
        this.empresaNombre = empresaNombre;
        this.tipoEmpresa = tipoEmpresa;
        this.ruc = ruc;
        this.camiones = camiones;
        this.choferes = choferes;
        this.operadoresLogisticos = operadoresLogisticos;
    }

    // Getters and setters
    public String getEmpresaId() { return empresaId; }
    public void setEmpresaId(String empresaId) { this.empresaId = empresaId; }

    public String getEmpresaNombre() { return empresaNombre; }
    public void setEmpresaNombre(String empresaNombre) { this.empresaNombre = empresaNombre; }

    public String getTipoEmpresa() { return tipoEmpresa; }
    public void setTipoEmpresa(String tipoEmpresa) { this.tipoEmpresa = tipoEmpresa; }

    public String getRuc() { return ruc; }
    public void setRuc(String ruc) { this.ruc = ruc; }

    public List<CamionDto> getCamiones() { return camiones; }
    public void setCamiones(List<CamionDto> camiones) { this.camiones = camiones; }

    public List<ChoferDto> getChoferes() { return choferes; }
    public void setChoferes(List<ChoferDto> choferes) { this.choferes = choferes; }

    public List<OperadorLogisticosDto> getOperadoresLogisticos() { return operadoresLogisticos; }
    public void setOperadoresLogisticos(List<OperadorLogisticosDto> operadoresLogisticos) { this.operadoresLogisticos = operadoresLogisticos; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\dto\ViajeDto.java ===

package com.example.fleetIq.dto;

import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ViajeDto {
    private String id;
    private String codigoViaje;
    private EmpresaDto empresaTransportista;
    private EmpresaDto empresaOperador;
    private EmpresaDto empresaCliente;
    private VehiculoDto vehiculo;
    private CarretaDto carreta;
    private ConductorDto conductor;
    private String tipoOperacion;
    private String documentoEmbarque;
    private String estado;
    private LocalDateTime fechaInicioProgramada;
    private LocalDateTime fechaFinProgramada;
    private LocalDateTime fechaInicioReal;
    private LocalDateTime fechaFinReal;
    private String observaciones;
    private String configuracionAlertas;
    private LocalDateTime fechaCreacion;
    private LocalDateTime fechaActualizacion;

    // Clase anidada para EmpresaDto basada en la tabla empresas
    @Data
    public static class EmpresaDto {
        private String id;
        private String nombre;
        private String tipoEmpresa;
        private String ruc;
        private String direccion;
        private String telefono;
        private String email;
        private Boolean activo;
        private String configuracionAlertas;
        private String configuracionDashboard;
        private LocalDateTime fechaCreacion;
        private LocalDateTime fechaActualizacion;
        private String empresaAdministradoraId;
    }

    // Clase anidada para VehiculoDto basada en la tabla vehiculos
    @Data
    public static class VehiculoDto {
        private String id;
        private String empresaId;
        private String placa;
        private String imei;
        private String marca;
        private String modelo;
        private Integer año;
        private String tipoVehiculo;
        private Double capacidadToneladas;
        private String estado;
        private Boolean activo;
        private LocalDateTime fechaCreacion;
    }

    // Clase anidada para CarretaDto basada en la tabla carretas
    @Data
    public static class CarretaDto {
        private String id;
        private String empresaId;
        private String placa;
        private String imei;
        private String marca;
        private String modelo;
        private Integer año;
        private String tipoVehiculo;
        private Double capacidadToneladas;
        private String estado;
        private Boolean activo;
        private LocalDateTime fechaCreacion;
    }

    // Clase anidada para ConductorDto basada en la tabla conductores y conductor_empresas
    @Data
    public static class ConductorDto {
        private String id;
        private String dni;
        private String nombre;
        private String apellidos;
        private String telefono;
        private String email;
        private String licenciaNumero;
        private String licenciaCategoria;
        private LocalDateTime licenciaVencimiento;
        private Boolean activo;
        private LocalDateTime fechaCreacion;
        private String empresaId; // De conductor_empresas
        private LocalDateTime fechaInicio; // De conductor_empresas
        private LocalDateTime fechaFin; // De conductor_empresas
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Alarm.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "alarms")
public class Alarm {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "imei", nullable = false)
    private String imei;

    @Column(name = "geofence_id", nullable = false)
    private Long geofenceId;

    @Column(name = "track_time")
    private Long trackTime;

    @Column(name = "entry_time")
    private Long entryTime;

    @Column(name = "exit_time")
    private Long exitTime; // Nuevo campo para tiempo de salida

    @Column(name = "alarm_type", length = 20)
    private String alarmType; // "ENTRY", "EXIT", "ENTRY_EXIT"

    @Column(name = "duration")
    private Long duration; // Duración en segundos dentro de la geocerca

    @Column(name = "latitude", nullable = false)
    private Double latitude;

    @Column(name = "longitude", nullable = false)
    private Double longitude;

    @Column(name = "device_name")
    private String deviceName;

    @Column(name = "plate_number")
    private String plateNumber;

    @Column(name = "fecha_creacion", updatable = false)
    @CreationTimestamp
    private LocalDateTime creationDate;

    // Constructores
    public Alarm() {
    }

    public Alarm(String imei, Long geofenceId, Long entryTime) {
        this.imei = imei;
        this.geofenceId = geofenceId;
        this.entryTime = entryTime;
        this.alarmType = "ENTRY";
    }

    // Getters y Setters (generados por @Data, solo incluyo los nuevos implícitamente)
    // El resto de getters y setters, incluyendo el método setExitTime con cálculo de duración, sigue intacto
    // Método utilitario para verificar si la alarma está activa (sin salida)
    public boolean isActive() {
        return exitTime == null;
    }

    // Método para obtener duración en formato legible
    public String getDurationFormatted() {
        if (duration == null) return "N/A";

        long hours = duration / 3600;
        long minutes = (duration % 3600) / 60;
        long seconds = duration % 60;

        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\AuthResponse.java ===

package com.example.fleetIq.model;

public class AuthResponse {
    private String accessToken;
    private int expiresIn;

    // Constructor, getters y setters
    public AuthResponse(String accessToken, int expiresIn) {
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
    }

    public String getAccessToken() { return accessToken; }
    public void setAccessToken(String accessToken) { this.accessToken = accessToken; }

    public int getExpiresIn() { return expiresIn; }
    public void setExpiresIn(int expiresIn) { this.expiresIn = expiresIn; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Carreta.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "carretas")
public class Carreta {
    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @Column(name = "empresa_id")
    private String empresaId;

    @Column(name = "placa")
    private String placa;

    @Column(name = "imei")
    private String imei;

    @Column(name = "marca")
    private String marca;

    @Column(name = "modelo")
    private String modelo;

    @Column(name = "año")
    private Integer año;

    @Column(name = "tipo_vehiculo")
    private String tipoVehiculo;

    @Column(name = "capacidad_toneladas")
    private Double capacidadToneladas;

    @Column(name = "estado")
    private String estado;

    @Column(name = "activo")
    private Boolean activo;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Conductor.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "conductores")
public class Conductor {
    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @Column(name = "dni")
    private String dni;

    @Column(name = "nombre")
    private String nombre;

    @Column(name = "apellidos")
    private String apellidos;

    @Column(name = "telefono")
    private String telefono;

    @Column(name = "email")
    private String email;

    @Column(name = "licencia_numero")
    private String licenciaNumero;

    @Column(name = "licencia_categoria")
    private String licenciaCategoria;

    @Column(name = "licencia_vencimiento")
    private LocalDate licenciaVencimiento;

    @Column(name = "activo")
    private Boolean activo;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;

    @OneToMany(mappedBy = "conductor", fetch = FetchType.LAZY)
    private List<ConductorEmpresas> conductorEmpresas;

    // Constructor vacío
    public Conductor() {}

    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getDni() { return dni; }
    public void setDni(String dni) { this.dni = dni; }

    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }

    public String getApellidos() { return apellidos; }
    public void setApellidos(String apellidos) { this.apellidos = apellidos; }

    public String getTelefono() { return telefono; }
    public void setTelefono(String telefono) { this.telefono = telefono; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getLicenciaNumero() { return licenciaNumero; }
    public void setLicenciaNumero(String licenciaNumero) { this.licenciaNumero = licenciaNumero; }

    public String getLicenciaCategoria() { return licenciaCategoria; }
    public void setLicenciaCategoria(String licenciaCategoria) { this.licenciaCategoria = licenciaCategoria; }

    public LocalDate getLicenciaVencimiento() { return licenciaVencimiento; }
    public void setLicenciaVencimiento(LocalDate licenciaVencimiento) { this.licenciaVencimiento = licenciaVencimiento; }

    public Boolean getActivo() { return activo; }
    public void setActivo(Boolean activo) { this.activo = activo; }

    public LocalDateTime getFechaCreacion() { return fechaCreacion; }
    public void setFechaCreacion(LocalDateTime fechaCreacion) { this.fechaCreacion = fechaCreacion; }

    public List<ConductorEmpresas> getConductorEmpresas() { return conductorEmpresas; }
    public void setConductorEmpresas(List<ConductorEmpresas> conductorEmpresas) { this.conductorEmpresas = conductorEmpresas; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\ConductorEmpresas.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "conductor_empresas")
public class ConductorEmpresas {
    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "conductor_id")
    private Conductor conductor;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id")
    private Empresa empresa;

    @Column(name = "fecha_inicio")
    private LocalDate fechaInicio;

    @Column(name = "fecha_fin")
    private LocalDate fechaFin;

    @Column(name = "activo")
    private Boolean activo;

    // Constructor vacío
    public ConductorEmpresas() {}

    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public Conductor getConductor() { return conductor; }
    public void setConductor(Conductor conductor) { this.conductor = conductor; }

    public Empresa getEmpresa() { return empresa; }
    public void setEmpresa(Empresa empresa) { this.empresa = empresa; }

    public LocalDate getFechaInicio() { return fechaInicio; }
    public void setFechaInicio(LocalDate fechaInicio) { this.fechaInicio = fechaInicio; }

    public LocalDate getFechaFin() { return fechaFin; }
    public void setFechaFin(LocalDate fechaFin) { this.fechaFin = fechaFin; }

    public Boolean getActivo() { return activo; }
    public void setActivo(Boolean activo) { this.activo = activo; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Device.java ===

package com.example.fleetIq.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "devices")
public class Device {

    @Id
    @Column(name = "imei")
    private String imei;

    @Column(name = "device_name")
    private String deviceName;

    @Column(name = "device_type")
    private String deviceType;

    @Column(name = "plate_number")
    private String plateNumber;

    @Column(name = "online_time")
    private Long onlineTime;

    @Column(name = "platform_due_time")
    private Long platformDueTime;

    @Column(name = "sim_card")
    private String simCard;

    @Column(name = "iccid")
    private String iccid;

    @Column(name = "activated_time")
    private Long activatedTime;

    @Column(name = "user_due_time")
    private Long userDueTime;

    // Default constructor
    public Device() {}

    // Getters and Setters
    public String getImei() {
        return imei;
    }

    public void setImei(String imei) {
        this.imei = imei;
    }

    public String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(String deviceName) {
        this.deviceName = deviceName;
    }

    public String getDeviceType() {
        return deviceType;
    }

    public void setDeviceType(String deviceType) {
        this.deviceType = deviceType;
    }

    public String getPlateNumber() {
        return plateNumber;
    }

    public void setPlateNumber(String plateNumber) {
        this.plateNumber = plateNumber;
    }

    public Long getOnlineTime() {
        return onlineTime;
    }

    public void setOnlineTime(Long onlineTime) {
        this.onlineTime = onlineTime;
    }

    public Long getPlatformDueTime() {
        return platformDueTime;
    }

    public void setPlatformDueTime(Long platformDueTime) {
        this.platformDueTime = platformDueTime;
    }

    public String getSimCard() {
        return simCard;
    }

    public void setSimCard(String simCard) {
        this.simCard = simCard;
    }

    public String getIccid() {
        return iccid;
    }

    public void setIccid(String iccid) {
        this.iccid = iccid;
    }

    public Long getActivatedTime() {
        return activatedTime;
    }

    public void setActivatedTime(Long activatedTime) {
        this.activatedTime = activatedTime;
    }

    public Long getUserDueTime() {
        return userDueTime;
    }

    public void setUserDueTime(Long userDueTime) {
        this.userDueTime = userDueTime;
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Empresa.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "empresas")
public class Empresa {
    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @Column(name = "nombre")
    private String nombre;

    @Column(name = "tipo_empresa")
    private String tipoEmpresa;

    @Column(name = "ruc")
    private String ruc;

    @Column(name = "direccion")
    private String direccion;

    @Column(name = "telefono")
    private String telefono;

    @Column(name = "email")
    private String email;

    @Column(name = "activo")
    private Boolean activo;

    @Column(name = "configuracion_alertas", columnDefinition = "JSON")
    private String configuracionAlertas;

    @Column(name = "configuracion_dashboard", columnDefinition = "JSON")
    private String configuracionDashboard;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;

    @Column(name = "fecha_actualizacion")
    private LocalDateTime fechaActualizacion;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_administradora_id")
    private Empresa empresaAdministradora;

    @OneToMany(mappedBy = "empresaAdministradora", fetch = FetchType.LAZY)
    private List<Empresa> empresasAdministradas;

    @OneToMany(mappedBy = "empresa", fetch = FetchType.LAZY)
    private List<Vehiculo> vehiculos;

    @OneToMany(mappedBy = "empresa", fetch = FetchType.LAZY)
    private List<ConductorEmpresas> conductorEmpresas;

    @OneToMany(mappedBy = "empresaTransportista", fetch = FetchType.LAZY)
    private List<Viaje> viajesComoTransportista;

    @OneToMany(mappedBy = "empresaOperador", fetch = FetchType.LAZY)
    private List<Viaje> viajesComoOperador;

    public Empresa() {}

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }

    public String getTipoEmpresa() { return tipoEmpresa; }
    public void setTipoEmpresa(String tipoEmpresa) { this.tipoEmpresa = tipoEmpresa; }

    public String getRuc() { return ruc; }
    public void setRuc(String ruc) { this.ruc = ruc; }

    public String getDireccion() { return direccion; }
    public void setDireccion(String direccion) { this.direccion = direccion; }

    public String getTelefono() { return telefono; }
    public void setTelefono(String telefono) { this.telefono = telefono; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public Boolean getActivo() { return activo; }
    public void setActivo(Boolean activo) { this.activo = activo; }

    public String getConfiguracionAlertas() { return configuracionAlertas; }
    public void setConfiguracionAlertas(String configuracionAlertas) { this.configuracionAlertas = configuracionAlertas; }

    public String getConfiguracionDashboard() { return configuracionDashboard; }
    public void setConfiguracionDashboard(String configuracionDashboard) { this.configuracionDashboard = configuracionDashboard; }

    public LocalDateTime getFechaCreacion() { return fechaCreacion; }
    public void setFechaCreacion(LocalDateTime fechaCreacion) { this.fechaCreacion = fechaCreacion; }

    public LocalDateTime getFechaActualizacion() { return fechaActualizacion; }
    public void setFechaActualizacion(LocalDateTime fechaActualizacion) { this.fechaActualizacion = fechaActualizacion; }

    public Empresa getEmpresaAdministradora() { return empresaAdministradora; }
    public void setEmpresaAdministradora(Empresa empresaAdministradora) { this.empresaAdministradora = empresaAdministradora; }

    public List<Empresa> getEmpresasAdministradas() { return empresasAdministradas; }
    public void setEmpresasAdministradas(List<Empresa> empresasAdministradas) { this.empresasAdministradas = empresasAdministradas; }

    public List<Vehiculo> getVehiculos() { return vehiculos; }
    public void setVehiculos(List<Vehiculo> vehiculos) { this.vehiculos = vehiculos; }

    public List<ConductorEmpresas> getConductorEmpresas() { return conductorEmpresas; }
    public void setConductorEmpresas(List<ConductorEmpresas> conductorEmpresas) { this.conductorEmpresas = conductorEmpresas; }

    public List<Viaje> getViajesComoTransportista() { return viajesComoTransportista; }
    public void setViajesComoTransportista(List<Viaje> viajesComoTransportista) { this.viajesComoTransportista = viajesComoTransportista; }

    public List<Viaje> getViajesComoOperador() { return viajesComoOperador; }
    public void setViajesComoOperador(List<Viaje> viajesComoOperador) { this.viajesComoOperador = viajesComoOperador; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Establecimiento.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "establecimientos")
public class Establecimiento {

    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @Column(name = "empresa_id")
    private String empresaId;

    @Column(name = "nombre")
    private String nombre;

    @Column(name = "tipo")
    private String tipo;

    @Column(name = "direccion")
    private String direccion;

    @Column(name = "latitud", precision = 10, scale = 8)
    private BigDecimal latitud;

    @Column(name = "longitud", precision = 11, scale = 8)
    private BigDecimal longitud;

    @Column(name = "publico")
    private Boolean publico;

    @Column(name = "activo")
    private Boolean activo;

    @Column(name = "configuracion_sla", columnDefinition = "JSON")
    private String configuracionSla;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;

    // Getters y Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getEmpresaId() { return empresaId; }
    public void setEmpresaId(String empresaId) { this.empresaId = empresaId; }

    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }

    public String getTipo() { return tipo; }
    public void setTipo(String tipo) { this.tipo = tipo; }

    public String getDireccion() { return direccion; }
    public void setDireccion(String direccion) { this.direccion = direccion; }

    public BigDecimal getLatitud() { return latitud; }
    public void setLatitud(BigDecimal latitud) { this.latitud = latitud; }

    public BigDecimal getLongitud() { return longitud; }
    public void setLongitud(BigDecimal longitud) { this.longitud = longitud; }

    public Boolean getPublico() { return publico; }
    public void setPublico(Boolean publico) { this.publico = publico; }

    public Boolean getActivo() { return activo; }
    public void setActivo(Boolean activo) { this.activo = activo; }

    public String getConfiguracionSla() { return configuracionSla; }
    public void setConfiguracionSla(String configuracionSla) { this.configuracionSla = configuracionSla; }

    public LocalDateTime getFechaCreacion() { return fechaCreacion; }
    public void setFechaCreacion(LocalDateTime fechaCreacion) { this.fechaCreacion = fechaCreacion; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Geofence.java ===

package com.example.fleetIq.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "geofences")
public class Geofence {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "imei")
    private String imei;

    @Column(name = "name")
    private String name;

    @Column(name = "alarmtype")
    private Integer alarmtype;

    @Column(name = "points", columnDefinition = "JSON")
    private String points; // JSON string, e.g. "[[-8.0, -79.0], [-8.1, -79.1], ...]]"

    @Column(name = "fecha_creacion", updatable = false)
    @CreationTimestamp
    private LocalDateTime creationDate;

    // Default constructor
    public Geofence() {}

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getImei() {
        return imei;
    }

    public void setImei(String imei) {
        this.imei = imei;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAlarmtype() {
        return alarmtype;
    }

    public void setAlarmtype(Integer alarmtype) {
        this.alarmtype = alarmtype;
    }

    public String getPoints() {
        return points;
    }

    public void setPoints(String points) {
        this.points = points;
    }

    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\HistoricalTrack.java ===

package com.example.fleetIq.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "historical_track")
public class HistoricalTrack {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "imei", nullable = false, length = 15)
    private String imei;

    @Column(name = "time", nullable = false)
    private Long time;

    @Column(name = "latitude", nullable = false)
    private Double latitude;

    @Column(name = "longitude", nullable = false)
    private Double longitude;

    @Column(name = "speed")
    private Double speed;

    @Column(name = "direction")
    private Double direction;

    @Column(name = "acc_status")
    private Boolean accStatus;

    @Column(name = "voltage")
    private Double voltage;

    // Getters y Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getImei() { return imei; }
    public void setImei(String imei) { this.imei = imei; }
    public Long getTime() { return time; }
    public void setTime(Long time) { this.time = time; }
    public Double getLatitude() { return latitude; }
    public void setLatitude(Double latitude) { this.latitude = latitude; }
    public Double getLongitude() { return longitude; }
    public void setLongitude(Double longitude) { this.longitude = longitude; }
    public Double getSpeed() { return speed; }
    public void setSpeed(Double speed) { this.speed = speed; }
    public Double getDirection() { return direction; }
    public void setDirection(Double direction) { this.direction = direction; }
    public Boolean getAccStatus() { return accStatus; }
    public void setAccStatus(Boolean accStatus) { this.accStatus = accStatus; }
    public Double getVoltage() { return voltage; }
    public void setVoltage(Double voltage) { this.voltage = voltage; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Track.java ===

package com.example.fleetIq.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "tracks")
public class Track {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "imei", nullable = false, length = 15)
    private String imei;

    @Column(name = "gpstime", nullable = false)
    private Long gpstime;

    @Column(name = "hearttime")
    private Long hearttime;

    @Column(name = "systemtime")
    private Long systemtime;

    @Column(name = "servertime")
    private Long servertime;

    @Column(name = "latitude", nullable = false)
    private Double latitude;

    @Column(name = "longitude", nullable = false)
    private Double longitude;

    @Column(name = "speed")
    private Double speed;

    @Column(name = "course")
    private Double course;

    @Column(name = "acctime")
    private Long acctime;

    @Column(name = "accstatus")
    private Boolean accstatus;

    @Column(name = "doorstatus")
    private Integer doorstatus;

    @Column(name = "chargestatus")
    private Integer chargestatus;

    @Column(name = "oilpowerstatus")
    private Integer oilpowerstatus;

    @Column(name = "defencestatus")
    private Integer defencestatus;

    @Column(name = "datastatus")
    private Integer datastatus;

    @Column(name = "battery")
    private Double battery;

    @Column(name = "mileage")
    private Long mileage;

    @Column(name = "todaymileage")
    private Long todaymileage;

    @Column(name = "externalpower", length = 10)
    private String externalpower;

    @Column(name = "fuel", length = 10)
    private String fuel;

    @Column(name = "fueltime")
    private Long fueltime;

    @Column(name = "temperature", length = 255)
    private String temperature;

    @Column(name = "temperaturetime")
    private Long temperaturetime;

    @Column(name = "fecha_creacion", updatable = false)
    @CreationTimestamp
    private LocalDateTime creationDate;

    // Getters y Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getImei() { return imei; }
    public void setImei(String imei) { this.imei = imei; }
    public Long getGpstime() { return gpstime; }
    public void setGpstime(Long gpstime) { this.gpstime = gpstime; }
    public Long getHearttime() { return hearttime; }
    public void setHearttime(Long hearttime) { this.hearttime = hearttime; }
    public Long getSystemtime() { return systemtime; }
    public void setSystemtime(Long systemtime) { this.systemtime = systemtime; }
    public Long getServertime() { return servertime; }
    public void setServertime(Long servertime) { this.servertime = servertime; }
    public Double getLatitude() { return latitude; }
    public void setLatitude(Double latitude) { this.latitude = latitude; }
    public Double getLongitude() { return longitude; }
    public void setLongitude(Double longitude) { this.longitude = longitude; }
    public Double getSpeed() { return speed; }
    public void setSpeed(Double speed) { this.speed = speed; }
    public Double getCourse() { return course; }
    public void setCourse(Double course) { this.course = course; }
    public Long getAcctime() { return acctime; }
    public void setAcctime(Long acctime) { this.acctime = acctime; }
    public Boolean getAccstatus() { return accstatus; }
    public void setAccstatus(Boolean accstatus) { this.accstatus = accstatus; }
    public Integer getDoorstatus() { return doorstatus; }
    public void setDoorstatus(Integer doorstatus) { this.doorstatus = doorstatus; }
    public Integer getChargestatus() { return chargestatus; }
    public void setChargestatus(Integer chargestatus) { this.chargestatus = chargestatus; }
    public Integer getOilpowerstatus() { return oilpowerstatus; }
    public void setOilpowerstatus(Integer oilpowerstatus) { this.oilpowerstatus = oilpowerstatus; }
    public Integer getDefencestatus() { return defencestatus; }
    public void setDefencestatus(Integer defencestatus) { this.defencestatus = defencestatus; }
    public Integer getDatastatus() { return datastatus; }
    public void setDatastatus(Integer datastatus) { this.datastatus = datastatus; }
    public Double getBattery() { return battery; }
    public void setBattery(Double battery) { this.battery = battery; }
    public Long getMileage() { return mileage; }
    public void setMileage(Long mileage) { this.mileage = mileage; }
    public Long getTodaymileage() { return todaymileage; }
    public void setTodaymileage(Long todaymileage) { this.todaymileage = todaymileage; }
    public String getExternalpower() { return externalpower; }
    public void setExternalpower(String externalpower) { this.externalpower = externalpower; }
    public String getFuel() { return fuel; }
    public void setFuel(String fuel) { this.fuel = fuel; }
    public Long getFueltime() { return fueltime; }
    public void setFueltime(Long fueltime) { this.fueltime = fueltime; }
    public String getTemperature() { return temperature; }
    public void setTemperature(String temperature) { this.temperature = temperature; }
    public Long getTemperaturetime() { return temperaturetime; }
    public void setTemperaturetime(Long temperaturetime) { this.temperaturetime = temperaturetime; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Tramo.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "tramos")
public class Tramo {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "viaje_id", nullable = false)
    private Viaje viaje;

    @Column(name = "orden", nullable = false)
    private Integer orden;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "establecimiento_origen_id", nullable = false)
    private Establecimiento establecimientoOrigen;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "establecimiento_destino_id", nullable = false)
    private Establecimiento establecimientoDestino;

    @Column(name = "tipo_actividad", nullable = false)
    @Enumerated(EnumType.STRING)
    private TipoActividad tipoActividad;

    @Column(name = "descripcion")
    private String descripcion;

    @Column(name = "hora_llegada_programada")
    private LocalDateTime horaLlegadaProgramada;

    @Column(name = "hora_salida_programada")
    private LocalDateTime horaSalidaProgramada;

    @Column(name = "hora_llegada_real")
    private LocalDateTime horaLlegadaReal;

    @Column(name = "hora_salida_real")
    private LocalDateTime horaSalidaReal;

    @Column(name = "estado", nullable = false)
    @Enumerated(EnumType.STRING)
    private EstadoTramo estado;

    @Column(name = "sla_minutos")
    private Integer slaMinutos;

    @Column(name = "observaciones")
    private String observaciones;

    public enum TipoActividad {
        recojo, entrega, carga, descarga, inspeccion
    }

    public enum EstadoTramo {
        pendiente, en_curso, completado, retrasado
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Vehiculo.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "vehiculos")
public class Vehiculo {
    @Id
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_id")
    private Empresa empresa;

    @Column(name = "placa")
    private String placa;

    @Column(name = "imei")
    private String imei;

    @Column(name = "marca")
    private String marca;

    @Column(name = "modelo")
    private String modelo;

    @Column(name = "ano")
    private Integer ano;

    @Column(name = "tipo_vehiculo")
    private String tipoVehiculo;

    @Column(name = "capacidad_toneladas")
    private BigDecimal capacidadToneladas;

    @Column(name = "estado")
    private String estado;

    @Column(name = "activo")
    private Boolean activo;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;

    // Constructor vacío
    public Vehiculo() {}

    // Getters y setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public Empresa getEmpresa() { return empresa; }
    public void setEmpresa(Empresa empresa) { this.empresa = empresa; }

    public String getPlaca() { return placa; }
    public void setPlaca(String placa) { this.placa = placa; }

    public String getImei() { return imei; }
    public void setImei(String imei) { this.imei = imei; }

    public String getMarca() { return marca; }
    public void setMarca(String marca) { this.marca = marca; }

    public String getModelo() { return modelo; }
    public void setModelo(String modelo) { this.modelo = modelo; }

    public Integer getAno() { return ano; }
    public void setAno(Integer ano) { this.ano = ano; }

    public String getTipoVehiculo() { return tipoVehiculo; }
    public void setTipoVehiculo(String tipoVehiculo) { this.tipoVehiculo = tipoVehiculo; }

    public BigDecimal getCapacidadToneladas() { return capacidadToneladas; }
    public void setCapacidadToneladas(BigDecimal capacidadToneladas) { this.capacidadToneladas = capacidadToneladas; }

    public String getEstado() { return estado; }
    public void setEstado(String estado) { this.estado = estado; }

    public Boolean getActivo() { return activo; }
    public void setActivo(Boolean activo) { this.activo = activo; }

    public LocalDateTime getFechaCreacion() { return fechaCreacion; }
    public void setFechaCreacion(LocalDateTime fechaCreacion) { this.fechaCreacion = fechaCreacion; }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\model\Viaje.java ===

package com.example.fleetIq.model;

import jakarta.persistence.*;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "viajes")
public class Viaje {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    @Column(name = "id", columnDefinition = "CHAR(36)")
    private String id;

    @Column(name = "codigo_viaje")
    private String codigoViaje;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_transportista_id")
    private Empresa empresaTransportista;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_operador_id")
    private Empresa empresaOperador;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "empresa_cliente_id")
    private Empresa empresaCliente;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "vehiculo_id")
    private Vehiculo vehiculo;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "carreta_id")
    private Carreta carreta; // Cambiado de Vehiculo a Carreta

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "conductor_id")
    private Conductor conductor;

    @Column(name = "tipo_operacion")
    private String tipoOperacion;

    @Column(name = "documento_embarque")
    private String documentoEmbarque;

    @Column(name = "estado")
    private String estado;

    @Column(name = "fecha_inicio_programada")
    private LocalDateTime fechaInicioProgramada;

    @Column(name = "fecha_fin_programada")
    private LocalDateTime fechaFinProgramada;

    @Column(name = "fecha_inicio_real")
    private LocalDateTime fechaInicioReal;

    @Column(name = "fecha_fin_real")
    private LocalDateTime fechaFinReal;

    @Column(name = "observaciones")
    private String observaciones;

    @Column(name = "configuracion_alertas", columnDefinition = "JSON")
    private String configuracionAlertas;

    @Column(name = "fecha_creacion")
    private LocalDateTime fechaCreacion;

    @Column(name = "fecha_actualizacion")
    private LocalDateTime fechaActualizacion;

}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\AlarmRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Alarm;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface AlarmRepository extends JpaRepository<Alarm, Long> {

    // ⭐ MÉTODO PRINCIPAL: Verificar si existe combinación específica imei + geofence_id + alarm_type
    boolean existsByImeiAndGeofenceIdAndAlarmType(String imei, Long geofenceId, String alarmType);

    // Método para verificar si ya existe una alarma para un IMEI en una geocerca específica
    boolean existsByImeiAndGeofenceId(String imei, Long geofenceId);

    // Método para verificar si existe una entrada activa (sin salida)
    boolean existsByImeiAndGeofenceIdAndExitTimeIsNull(String imei, Long geofenceId);

    // Método para obtener una alarma activa (sin tiempo de salida)
    Alarm findByImeiAndGeofenceIdAndExitTimeIsNull(String imei, Long geofenceId);

    // Método para obtener todas las alarmas activas de un IMEI
    List<Alarm> findByImeiAndExitTimeIsNull(String imei);

    // Método para obtener todas las alarmas activas
    List<Alarm> findByExitTimeIsNull();

    // Método adicional para obtener alarmas por IMEI
    List<Alarm> findByImei(String imei);

    // Método adicional para obtener alarmas por geocerca
    List<Alarm> findByGeofenceId(Long geofenceId);

    // Método para obtener alarmas por tipo específico
    List<Alarm> findByAlarmType(String alarmType);

    // Método para obtener registros específicos de entrada y salida
    List<Alarm> findByImeiAndGeofenceIdAndAlarmType(String imei, Long geofenceId, String alarmType);


    List<Alarm> findByTrackTimeBetween(Long start, Long end);

    List<Alarm> findByImeiAndTrackTimeBetween(String imei, Long start, Long end);

    Alarm findByImeiAndGeofenceIdAndAlarmTypeAndExitTimeIsNull(String imei, Long geofenceId, String alarmType);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\DeviceRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Device;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface DeviceRepository extends JpaRepository<Device, Long> {
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\EstablecimientoRepository.java ===

package com.example.fleetIq.repository;
import com.example.fleetIq.model.Establecimiento;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface EstablecimientoRepository extends JpaRepository<Establecimiento, String> {

    List<Establecimiento> findByActivoTrue();
    List<Establecimiento> findByTipo(String tipo);
    List<Establecimiento> findByEmpresaId(String empresaId);
    List<Establecimiento> findByPublicoTrueAndActivoTrue();
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\GeofenceRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Geofence;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface GeofenceRepository extends JpaRepository<Geofence, Long> {
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\HistoricalTrackRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.HistoricalTrack;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface HistoricalTrackRepository extends JpaRepository<HistoricalTrack, Long> {
    @Query("SELECT t FROM HistoricalTrack t WHERE t.imei = :imei AND t.time BETWEEN :beginTime AND :endTime ORDER BY t.time ASC")
    List<HistoricalTrack> findByImeiAndTimeBetween(String imei, Long beginTime, Long endTime);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\OperadorLogisticoRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Empresa;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface OperadorLogisticoRepository extends JpaRepository<Empresa, String> {

    // Consulta principal solo para el operador y su administradora
    @Query("SELECT e FROM Empresa e " +
            "LEFT JOIN FETCH e.empresaAdministradora " +
            "LEFT JOIN FETCH e.empresasAdministradas " +
            "WHERE e.id = :id AND e.tipoEmpresa = :tipoEmpresa")
    Empresa findByIdAndTipoEmpresa(@Param("id") String id, @Param("tipoEmpresa") String tipoEmpresa);

    // Consulta separada para vehiculos del transportista
    @Query("SELECT e FROM Empresa e " +
            "LEFT JOIN FETCH e.vehiculos " +
            "WHERE e.id = :id")
    Empresa findWithVehiculosById(@Param("id") String id);

    // Consulta separada para conductorEmpresas del transportista (con conductores)
    @Query("SELECT e FROM Empresa e " +
            "LEFT JOIN FETCH e.conductorEmpresas ce " +
            "LEFT JOIN FETCH ce.conductor " +
            "WHERE e.id = :id")
    Empresa findWithConductoresById(@Param("id") String id);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\TrackRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Track;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface TrackRepository extends JpaRepository<Track, Long> {

    // ⭐ MÉTODO PRINCIPAL: Obtener el track más reciente por cada IMEI
    @Query("SELECT t FROM Track t WHERE t.id IN " +
            "(SELECT MAX(t2.id) FROM Track t2 GROUP BY t2.imei)")
    List<Track> findLatestTracksByImei();

    // Alternativa usando gpstime si prefieres por timestamp en lugar de ID
    @Query("SELECT t FROM Track t WHERE t.gpstime IN " +
            "(SELECT MAX(t2.gpstime) FROM Track t2 GROUP BY t2.imei)")
    List<Track> findLatestTracksByImeiAndTime();

    // Método para obtener tracks activos de los últimos X minutos
    @Query("SELECT t FROM Track t WHERE t.gpstime > :timestamp")
    List<Track> findActiveTracksSince(@Param("timestamp") Long timestamp);

    // Método para obtener el track más reciente de un IMEI específico
    @Query("SELECT t FROM Track t WHERE t.imei = :imei ORDER BY t.id DESC LIMIT 1")
    Track findLatestTrackByImei(@Param("imei") String imei);

    // Método para obtener tracks por IMEI específico
    List<Track> findByImei(String imei);

    // Método para obtener tracks ordenados por fecha descendente
    @Query("SELECT t FROM Track t ORDER BY t.gpstime DESC")
    List<Track> findAllOrderByGpstimeDesc();

    @Query("SELECT t FROM Track t WHERE t.imei = :imei AND t.gpstime BETWEEN :beginTime AND :endTime ORDER BY t.gpstime ASC")
    List<Track> findByImeiAndTimeBetween(String imei, Long beginTime, Long endTime);

    @Query("SELECT t FROM Track t WHERE t.gpstime >= ?1 AND t.id IN (SELECT MAX(t2.id) FROM Track t2 GROUP BY t2.imei)")
    List<Track> findLatestTracksByImeiWithinLastMinutes(Long timestamp);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\TramoRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Tramo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface TramoRepository extends JpaRepository<Tramo, String> {
    @Query("SELECT t FROM Tramo t JOIN FETCH t.viaje JOIN FETCH t.establecimientoOrigen JOIN FETCH t.establecimientoDestino WHERE t.viaje.id = :viajeId")
    List<Tramo> findByViajeId(@Param("viajeId") String viajeId);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\TransportistaRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Empresa;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface TransportistaRepository extends JpaRepository<Empresa, String> {

    @Query("SELECT e FROM Empresa e WHERE e.id = :id AND e.tipoEmpresa = :tipoEmpresa")
    Empresa findByIdAndTipoEmpresa(@Param("id") String id, @Param("tipoEmpresa") String tipoEmpresa);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\repository\ViajeRepository.java ===

package com.example.fleetIq.repository;

import com.example.fleetIq.model.Viaje;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface ViajeRepository extends JpaRepository<Viaje, String> {
    List<Viaje> findByCodigoViaje(String codigoViaje);

    @Query("SELECT v FROM Viaje v " +
            "JOIN FETCH v.empresaTransportista et " +
            "LEFT JOIN FETCH v.empresaOperador eo " +
            "JOIN FETCH v.empresaCliente ec " +
            "JOIN FETCH v.vehiculo ve " +
            "JOIN FETCH v.carreta ca " +
            "JOIN FETCH v.conductor co " +
            "LEFT JOIN FETCH co.conductorEmpresas ce " +
            "LEFT JOIN FETCH ce.empresa " +
            "WHERE v.empresaTransportista.id = :empresaId")
    List<Viaje> findByEmpresaTransportistaId(@Param("empresaId") String empresaId);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\AlarmService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Alarm;
import com.example.fleetIq.model.Geofence;
import com.example.fleetIq.model.Track;

import java.util.List;

public interface AlarmService {
    void checkAndLogAlarm(Track track) throws Exception;
    List<Alarm> getAlarms();
    List<Alarm> findAlarmsByFilters(String imei, Long startTimestamp, Long endTimestamp);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\AlarmServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Alarm;
import com.example.fleetIq.model.Device;
import com.example.fleetIq.model.Geofence;
import com.example.fleetIq.model.Track;
import com.example.fleetIq.repository.AlarmRepository;
import com.example.fleetIq.repository.DeviceRepository;
import com.example.fleetIq.repository.GeofenceRepository;
import com.example.fleetIq.repository.TrackRepository;
import org.json.JSONArray;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException; // ← NUEVO IMPORT
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class AlarmServiceImpl implements AlarmService {

    @Autowired
    private AlarmRepository alarmRepository;

    @Autowired
    private GeofenceRepository geofenceRepository;

    @Autowired
    private TrackRepository trackRepository;

    @Autowired
    private DeviceRepository deviceRepository;

    // Método que se ejecuta automáticamente cada 3 segundos
    @Scheduled(fixedRate = 3000) // 3000 milisegundos = 3 segundos
    public void checkAlarmsAutomatically() {
        try {
            long fiveMinutesAgo = System.currentTimeMillis() / 1000L - 300; // 5 minutos = 300 segundos
            List<Track> latestTracks = trackRepository.findLatestTracksByImeiWithinLastMinutes(fiveMinutesAgo);

            for (Track track : latestTracks) {
                checkAndLogAlarm(track);
            }
        } catch (Exception e) {
            System.err.println("Error durante la verificación automática de alarmas: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Transactional
    public void checkAndLogAlarm(Track track) throws Exception {
        if (track.getImei() == null || track.getLatitude() == null || track.getLongitude() == null) {
            throw new IllegalArgumentException("Track must have IMEI, latitude, and longitude");
        }

        List<Geofence> geofences = geofenceRepository.findAll();
        for (Geofence geofence : geofences) {

            JSONArray pointsArray = new JSONArray(geofence.getPoints());
            double[] x = new double[pointsArray.length()];
            double[] y = new double[pointsArray.length()];
            for (int i = 0; i < pointsArray.length(); i++) {
                JSONArray point = pointsArray.getJSONArray(i);
                y[i] = point.getDouble(0); // lat as y
                x[i] = point.getDouble(1); // lon as x
            }

            // AQUÍ ESTÁ EL CAMBIO PRINCIPAL: Evaluar tanto entrada como salida
            boolean isCurrentlyInside = isPointInPolygon(track.getLongitude(), track.getLatitude(), x, y);
            boolean hasActiveEntry = alarmRepository.existsByImeiAndGeofenceIdAndExitTimeIsNull(track.getImei(), geofence.getId());

            if (isCurrentlyInside && !hasActiveEntry) {
                // ENTRADA: Está dentro y no tiene entrada activa
                System.out.println("✅ Está dentro y no tiene entrada activa " + track.getImei() + " entered geofence " + geofence.getId());
                Alarm alarm = new Alarm();
                alarm.setImei(track.getImei());
                alarm.setGeofenceId(geofence.getId());
                alarm.setTrackTime(track.getGpstime());
                alarm.setAlarmType("ENTRY");
                alarm.setLatitude(track.getLatitude());
                alarm.setLongitude(track.getLongitude());
                alarm.setDeviceName(deviceRepository.findById(Long.valueOf(track.getImei())).map(Device::getDeviceName).orElse("Unknown"));
                alarm.setPlateNumber(deviceRepository.findById(Long.valueOf(track.getImei())).map(Device::getPlateNumber).orElse("Unknown"));
                alarm.setEntryTime(System.currentTimeMillis() / 1000L);
                alarm.setExitTime(null);

                // ← CAMBIO: Try-catch para manejar duplicados en ENTRY
                try {
                    alarmRepository.save(alarm);
                    System.out.println("✅ ENTRY: IMEI " + track.getImei() + " entered geofence " + geofence.getId());
                } catch (DataIntegrityViolationException e) {
                    System.err.println("⚠️ Alarm ENTRY duplicada ignorada para IMEI " + track.getImei() + " y geocerca " + geofence.getId() + ": " + e.getMessage());
                }

            } else if (!isCurrentlyInside && hasActiveEntry) {
                // SALIDA: No está dentro pero tiene entrada activa
                Alarm activeAlarm = alarmRepository.findByImeiAndGeofenceIdAndExitTimeIsNull(track.getImei(), geofence.getId());

                if (activeAlarm != null) {
                    // Cerrar la alarma de entrada existente
                    System.out.println("✅ Cerrar la alarma de entrada existente " + track.getImei() + " entered geofence " + geofence.getId());

                    activeAlarm.setExitTime(System.currentTimeMillis() / 1000L);
                    activeAlarm.setAlarmType("ENTRY");
                    alarmRepository.save(activeAlarm);

                    // Crear un nuevo registro para la salida
                    Alarm exitAlarm = new Alarm();
                    exitAlarm.setImei(track.getImei());
                    exitAlarm.setGeofenceId(geofence.getId());
                    exitAlarm.setTrackTime(track.getGpstime());
                    exitAlarm.setAlarmType("EXIT");
                    exitAlarm.setDeviceName(deviceRepository.findById(Long.valueOf(track.getImei())).map(Device::getDeviceName).orElse("Unknown"));
                    exitAlarm.setPlateNumber(deviceRepository.findById(Long.valueOf(track.getImei())).map(Device::getPlateNumber).orElse("Unknown"));
                    exitAlarm.setLatitude(track.getLatitude());
                    exitAlarm.setLongitude(track.getLongitude());
                    exitAlarm.setEntryTime(activeAlarm.getEntryTime());
                    exitAlarm.setExitTime(System.currentTimeMillis() / 1000L);

                    // ← CAMBIO: Try-catch para manejar duplicados en EXIT
                    try {
                        alarmRepository.save(exitAlarm);
                        long duration = exitAlarm.getExitTime() - exitAlarm.getEntryTime();
                        System.out.println("🚪 EXIT: IMEI " + track.getImei() + " exited geofence " + geofence.getId() + " (Duration: " + duration + " seconds)");
                    } catch (DataIntegrityViolationException e) {
                        System.err.println("⚠️ Alarm EXIT duplicada ignorada para IMEI " + track.getImei() + " y geocerca " + geofence.getId() + ": " + e.getMessage());
                    }
                }
            }
            // No imprimimos mensajes para casos donde no hay cambio de estado
        }
    }

    @Override
    public List<Alarm> getAlarms() {
        return alarmRepository.findAll();
    }

    // Método adicional para obtener alarmas activas
    public List<Alarm> getActiveAlarms() {
        return alarmRepository.findByExitTimeIsNull();
    }

    // Método para forzar salida de todas las alarmas activas de un IMEI (útil para testing)
    public void forceExitAllActive(String imei) {
        List<Alarm> activeAlarms = alarmRepository.findByImeiAndExitTimeIsNull(imei);
        long currentTime = System.currentTimeMillis() / 1000L;

        for (Alarm alarm : activeAlarms) {
            alarm.setExitTime(currentTime);
            alarm.setAlarmType("ENTRY_EXIT");
            alarmRepository.save(alarm);
            System.out.println("🔧 Forced exit for alarm ID: " + alarm.getId());
        }
    }

    // Ray-casting algorithm for point in polygon
    private boolean isPointInPolygon(double pointX, double pointY, double[] polygonX, double[] polygonY) {
        int polygonVertices = polygonX.length;
        boolean isIn = false;
        for (int i = 0, j = polygonVertices - 1; i < polygonVertices; j = i++) {
            if ((polygonY[i] > pointY) != (polygonY[j] > pointY) &&
                    (pointX < (polygonX[j] - polygonX[i]) * (pointY - polygonY[i]) / (polygonY[j] - polygonY[i]) + polygonX[i])) {
                isIn = !isIn;
            }
        }
        return isIn;
    }

    public List<Alarm> findAlarmsByFilters(String imei, Long startTimestamp, Long endTimestamp) {
        if (imei != null && !imei.isEmpty() && startTimestamp != null && endTimestamp != null) {
            return alarmRepository.findByImeiAndTrackTimeBetween(imei, startTimestamp, endTimestamp);
        } else if (imei != null && !imei.isEmpty()) {
            return alarmRepository.findByImei(imei);
        } else if (startTimestamp != null && endTimestamp != null) {
            return alarmRepository.findByTrackTimeBetween(startTimestamp, endTimestamp);
        } else {
            return alarmRepository.findAll();
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\AuthService.java ===

package com.example.fleetIq.service;

import org.json.JSONObject;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.MessageDigest;
import java.time.Instant;

@Service
public class AuthService {

    public String getAccessToken() throws Exception {
        long time = Instant.now().getEpochSecond();
        String md5Password = calculateMD5("expert2023"); // Asegúrate de que esta contraseña sea correcta
        String signatureInput = md5Password + time;
        String signature = calculateMD5(signatureInput);

        URL url = new URL("https://api.protrack365.com/api/authorization?time=" + time + "&account=expertsac&signature=" + signature);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        if (conn.getResponseCode() == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            br.close();
            JSONObject json = new JSONObject(response.toString());
            if (json.getInt("code") == 0) {
                return json.getJSONObject("record").getString("access_token");
            } else {
                throw new Exception("Error de API al obtener token: " + json.getString("message"));
            }
        } else {
            throw new Exception("Error HTTP al obtener token: " + conn.getResponseCode());
        }
    }

    private String calculateMD5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] array = md.digest(input.getBytes("UTF-8"));
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Fallo en el cálculo de MD5", e);
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\DeviceService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Device;
import java.util.List;

public interface DeviceService {
    List<Device> getAllDevices();
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\DeviceServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Device;
import com.example.fleetIq.repository.DeviceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DeviceServiceImpl implements DeviceService {

    @Autowired
    private DeviceRepository deviceRepository;

    @Override
    public List<Device> getAllDevices() {
        return deviceRepository.findAll();
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\EstablecimientoService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.EstablecimientoDto;
import java.util.List;

public interface EstablecimientoService {

    List<EstablecimientoDto> getAllEstablecimientos();
    List<EstablecimientoDto> getEstablecimientosByEmpresa(String empresaId);
    List<EstablecimientoDto> getEstablecimientosByTipo(String tipo);
    List<EstablecimientoDto> getEstablecimientosPublicos();
    EstablecimientoDto getEstablecimientoById(String id);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\EstablecimientoServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.EstablecimientoDto;
import com.example.fleetIq.model.Establecimiento;
import com.example.fleetIq.repository.EstablecimientoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class EstablecimientoServiceImpl implements EstablecimientoService {

    @Autowired
    private EstablecimientoRepository establecimientoRepository;

    @Override
    @Transactional(readOnly = true)
    public List<EstablecimientoDto> getAllEstablecimientos() {
        List<Establecimiento> establecimientos = establecimientoRepository.findByActivoTrue();
        return establecimientos.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public List<EstablecimientoDto> getEstablecimientosByEmpresa(String empresaId) {
        List<Establecimiento> establecimientos = establecimientoRepository.findByEmpresaId(empresaId);
        return establecimientos.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public List<EstablecimientoDto> getEstablecimientosByTipo(String tipo) {
        List<Establecimiento> establecimientos = establecimientoRepository.findByTipo(tipo);
        return establecimientos.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public List<EstablecimientoDto> getEstablecimientosPublicos() {
        List<Establecimiento> establecimientos = establecimientoRepository.findByPublicoTrueAndActivoTrue();
        return establecimientos.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public EstablecimientoDto getEstablecimientoById(String id) {
        return establecimientoRepository.findById(id)
                .map(this::convertToDto)
                .orElse(null);
    }

    private EstablecimientoDto convertToDto(Establecimiento establecimiento) {
        return new EstablecimientoDto(
                establecimiento.getId(),
                establecimiento.getEmpresaId(),
                establecimiento.getNombre(),
                establecimiento.getTipo(),
                establecimiento.getDireccion(),
                establecimiento.getLatitud(),
                establecimiento.getLongitud(),
                establecimiento.getPublico(),
                establecimiento.getActivo(),
                establecimiento.getConfiguracionSla(),
                establecimiento.getFechaCreacion()
        );
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\GeofenceService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Geofence;

public interface GeofenceService {
    void createGeofence(Geofence geofence) throws Exception;
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\GeofenceServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Geofence;
import com.example.fleetIq.repository.GeofenceRepository;
import org.json.JSONArray;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class GeofenceServiceImpl implements GeofenceService {

    @Autowired
    private GeofenceRepository geofenceRepository;

    @Override
    public void createGeofence(Geofence geofence) throws Exception {
        // Validate geofence data
        if (geofence.getImei() == null || geofence.getImei().isEmpty()) {
            throw new IllegalArgumentException("IMEI cannot be null or empty");
        }
        if (geofence.getName() == null || geofence.getName().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
        if (geofence.getAlarmtype() == null || geofence.getAlarmtype() < 0 || geofence.getAlarmtype() > 2) {
            throw new IllegalArgumentException("Alarm type must be 0 (Out), 1 (In), or 2 (In/Out)");
        }
        if (geofence.getPoints() == null || geofence.getPoints().isEmpty()) {
            throw new IllegalArgumentException("Points cannot be null or empty");
        }
        // Validate points as JSON array of arrays
        try {
            JSONArray pointsArray = new JSONArray(geofence.getPoints());
            if (pointsArray.length() < 3) {
                throw new IllegalArgumentException("Polygon must have at least 3 points");
            }
            for (int i = 0; i < pointsArray.length(); i++) {
                JSONArray point = pointsArray.getJSONArray(i);
                if (point.length() != 2 || !point.get(0).toString().matches("-?\\d+(\\.\\d+)?") || !point.get(1).toString().matches("-?\\d+(\\.\\d+)?")) {
                    throw new IllegalArgumentException("Each point must be [lat, lon] with numeric values");
                }
            }
        } catch (JSONException e) {
            throw new IllegalArgumentException("Points must be a valid JSON array of [lat, lon] arrays");
        }

        // Save to database
        geofenceRepository.save(geofence);
        System.out.println("Geofence created and saved for IMEI " + geofence.getImei());
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\HistoricalTrackService.java ===

package com.example.fleetIq.service;

public interface HistoricalTrackService {
    void fetchAndSaveHistoricalTracks(Long beginTime, Long endTime) throws Exception;
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\HistoricalTrackServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.HistoricalTrack;
import com.example.fleetIq.repository.DeviceRepository;
import com.example.fleetIq.repository.HistoricalTrackRepository;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.List;
import java.time.Instant;

@Service
public class HistoricalTrackServiceImpl implements HistoricalTrackService {

    @Autowired
    private HistoricalTrackRepository historicalTrackRepository;

    @Autowired
    private DeviceRepository deviceRepository;

    private String getAccessToken() throws Exception {
        long time = Instant.now().getEpochSecond();
        String md5Password = calculateMD5("expert2023");
        String signatureInput = md5Password + time;
        String signature = calculateMD5(signatureInput);

        URL url = new URL("http://api.protrack365.com/api/authorization?time=" + time + "&account=expertsac&signature=" + signature);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        if (conn.getResponseCode() == 200) {
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            br.close();
            JSONObject json = new JSONObject(response.toString());
            if (json.getInt("code") == 0) {
                return json.getJSONObject("record").getString("access_token");
            } else {
                throw new Exception("Error de API: " + json.getString("message"));
            }
        } else {
            throw new Exception("Error HTTP: " + conn.getResponseCode());
        }
    }

    private String calculateMD5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] array = md.digest(input.getBytes("UTF-8"));
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Fallo en el cálculo de MD5", e);
        }
    }

    @Override
    public void fetchAndSaveHistoricalTracks(Long beginTime, Long endTime) throws Exception {
        String accessToken = getAccessToken();
        List<com.example.fleetIq.model.Device> devices = deviceRepository.findAll();
        if (devices.isEmpty()) {
            throw new Exception("No se encontraron dispositivos registrados.");
        }

        // Recopilar todos los IMEIs en una lista
        StringBuilder imeis = new StringBuilder();
        for (com.example.fleetIq.model.Device device : devices) {
            if (imeis.length() > 0) imeis.append(",");
            imeis.append(device.getImei());
        }

        fetchAndSaveForImeis(imeis.toString(), beginTime, endTime, accessToken);
    }

    private void fetchAndSaveForImeis(String imeis, Long beginTime, Long endTime, String accessToken) throws Exception {
        int page = 1;
        int pagesize = 500; // Máximo permitido por la API
        boolean hasMore = true;

        while (hasMore) {
            URL url = new URL("http://api.protrack365.com/api/track?access_token=" + accessToken + "&imeis=" + imeis + "&begin_time=" + beginTime + "&end_time=" + endTime + "&page=" + page + "&pagesize=" + pagesize);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
                br.close();
                JSONObject json = new JSONObject(response.toString());
                if (json.getInt("code") == 0) {
                    JSONArray records = json.getJSONArray("record");
                    if (records.length() < pagesize) {
                        hasMore = false;
                    }
                    for (int i = 0; i < records.length(); i++) {
                        JSONObject record = records.getJSONObject(i);
                        HistoricalTrack track = new HistoricalTrack();
                        track.setImei(record.getString("imei")); // Obtener imei del registro
                        track.setTime(record.getLong("time"));
                        track.setLatitude(record.getDouble("latitude"));
                        track.setLongitude(record.getDouble("longitude"));
                        track.setSpeed(record.optDouble("speed", 0.0));
                        track.setDirection(record.optDouble("direction", 0.0));
                        track.setAccStatus(record.optBoolean("accstatus", false));
                        track.setVoltage(record.optDouble("voltage", 0.0));
                        // Guardar solo si no existe
                        if (historicalTrackRepository.findByImeiAndTimeBetween(track.getImei(), track.getTime(), track.getTime()).isEmpty()) {
                            historicalTrackRepository.save(track);
                        }
                    }
                    page++;
                } else {
                    throw new Exception("Error de API: " + json.getString("message"));
                }
            } else {
                throw new Exception("Error HTTP: " + conn.getResponseCode());
            }
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\OperadorLogisticoService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.OperadorLogisticoInfoResponse;

public interface OperadorLogisticoService {
    OperadorLogisticoInfoResponse getOperadorLogisticoInfo(String operadorLogisticoId);
    OperadorLogisticoInfoResponse listarOperadores(String operadorLogisticoId);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\OperadorLogisticoServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.*;
import com.example.fleetIq.model.Empresa;
import com.example.fleetIq.repository.OperadorLogisticoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class OperadorLogisticoServiceImpl implements OperadorLogisticoService {

    @Autowired
    private OperadorLogisticoRepository operadorLogisticoRepository;

    @Override
    @Transactional(readOnly = true)
    public OperadorLogisticoInfoResponse getOperadorLogisticoInfo(String operadorId) {
        // Consulta principal
        Empresa operador = operadorLogisticoRepository.findByIdAndTipoEmpresa(operadorId, "operador_logistico");
        if (operador == null) {
            return null;
        }

        // Obtener la empresa administradora (transportista)
        Empresa administradora = operador.getEmpresaAdministradora();
        EmpresaDto administradoraDto = null;
        List<CamionDto> camiones = List.of();
        List<ChoferDto> choferes = List.of();

        if (administradora != null) {
            administradoraDto = new EmpresaDto(
                    administradora.getId(),
                    administradora.getNombre(),
                    administradora.getTipoEmpresa(),
                    administradora.getRuc()
            );

            // CONSULTAS SEPARADAS para evitar MultipleBagFetchException
            Empresa administradoraConVehiculos = operadorLogisticoRepository.findWithVehiculosById(administradora.getId());
            Empresa administradoraConConductores = operadorLogisticoRepository.findWithConductoresById(administradora.getId());

            // OBTENER CAMIONES DEL TRANSPORTISTA
            camiones = administradoraConVehiculos.getVehiculos().stream()
                    .map(v -> new CamionDto(
                            v.getPlaca(),
                            v.getMarca(),
                            v.getModelo(),
                            v.getAno(),
                            v.getCapacidadToneladas(),
                            v.getEstado()
                    ))
                    .collect(Collectors.toList());

            // OBTENER CHOFERES DEL TRANSPORTISTA
            choferes = administradoraConConductores.getConductorEmpresas().stream()
                    .map(ce -> new ChoferDto(
                            ce.getConductor().getDni(),
                            ce.getConductor().getNombre(),
                            ce.getConductor().getApellidos(),
                            ce.getConductor().getTelefono(),
                            ce.getConductor().getEmail(),
                            ce.getConductor().getLicenciaNumero(),
                            ce.getConductor().getLicenciaCategoria(),
                            ce.getConductor().getLicenciaVencimiento()
                    ))
                    .collect(Collectors.toList());
        }

        // Mapear clientes (empresas exportadoras que tienen a este operador como administradora)
        List<ClienteDto> clientes = operador.getEmpresasAdministradas().stream()
                .filter(cliente -> "exportador".equals(cliente.getTipoEmpresa()))
                .map(cl -> new ClienteDto(cl.getId(), cl.getNombre(), cl.getRuc()))
                .collect(Collectors.toList());

        // Crear DTO del operador logístico
        EmpresaDto operadorDto = new EmpresaDto(
                operador.getId(),
                operador.getNombre(),
                operador.getTipoEmpresa(),
                operador.getRuc()
        );

        return new OperadorLogisticoInfoResponse(
                operadorDto,
                administradoraDto,
                camiones,
                choferes,
                clientes
        );
    }

    @Override
    @Transactional(readOnly = true)
    public OperadorLogisticoInfoResponse listarOperadores(String empresaId) {
        // Lógica para listar operadores
        return null;
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TableDataService.java ===

package com.example.fleetIq.service;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
public class TableDataService {
    private final JdbcTemplate jdbcTemplate;

    public TableDataService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public List<String> getAllTables() {
        return jdbcTemplate.queryForList(
                "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'fleetiq'", String.class);
    }

    public List<Map<String, Object>> getTableData(String tableName, int page, int size) {
        if (!getAllTables().contains(tableName.toLowerCase())) {
            throw new IllegalArgumentException("Tabla inválida");
        }
        int offset = page * size;
        return jdbcTemplate.queryForList("SELECT * FROM " + tableName + " LIMIT ? OFFSET ?", size, offset);
    }

    public int getTotalRows(String tableName) {
        if (!getAllTables().contains(tableName.toLowerCase())) {
            throw new IllegalArgumentException("Tabla inválida");
        }
        return jdbcTemplate.queryForObject("SELECT COUNT(*) FROM " + tableName, Integer.class);
    }

    public List<Map<String, Object>> getAllTableData(String tableName) {
        if (!getAllTables().contains(tableName.toLowerCase())) {
            throw new IllegalArgumentException("Tabla inválida");
        }
        return jdbcTemplate.queryForList("SELECT * FROM " + tableName);
    }

    // Método para ejecutar query SQL personalizado (usado por vertablas.html y query.html)
    public List<Map<String, Object>> executeQuery(String sql) {
        try {
            // Validación básica: solo permitir SELECT para seguridad (opcional, ajusta según necesidades)
            if (!sql.trim().toUpperCase().startsWith("SELECT")) {
                throw new IllegalArgumentException("Solo se permiten consultas SELECT por seguridad.");
            }
            return jdbcTemplate.queryForList(sql);
        } catch (Exception e) {
            throw new IllegalArgumentException("Error en la consulta: " + e.getMessage());
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TokenCache.java ===

package com.example.fleetIq.service;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.Instant;

@Component
public class TokenCache {

    private String accessToken;
    private long expirationTime; // Tiempo de expiración en milisegundos
    private final Object lock = new Object(); // Para sincronización

    private final AuthService authService; // ← Cambiado a AuthService

    public TokenCache(AuthService authService) {
        this.authService = authService;
        this.expirationTime = 0; // Inicialmente expirado
        renewToken(); // Obtener token al iniciar
    }

    public String getAccessToken() {
        synchronized (lock) {
            if (System.currentTimeMillis() >= expirationTime) {
                renewToken();
            }
            return accessToken;
        }
    }

    @Scheduled(fixedRate = 1800000) // 30 minutos = 1,800,000 milisegundos
    public void renewToken() {
        synchronized (lock) {
            try {
                this.accessToken = authService.getAccessToken(); // ← Usa AuthService
                this.expirationTime = System.currentTimeMillis() + 1800000;
                System.out.println("🔑 Token renovado a las: " + Instant.now());
            } catch (Exception e) {
                System.err.println("Error al renovar el token: " + e.getMessage());
                this.expirationTime = System.currentTimeMillis() + 60000; // Reintentar en 1 minuto
            }
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TrackService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Device;
import com.example.fleetIq.model.Track;

import java.util.List;

public interface TrackService {
    void fetchAndSaveTracks(Long beginTime, Long endTime) throws Exception;
    List<Track> getTracksByImei(String imei, Long beginTime, Long endTime);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TrackServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Device;
import com.example.fleetIq.model.Track;
import com.example.fleetIq.repository.DeviceRepository;
import com.example.fleetIq.repository.TrackRepository;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.net.HttpURLConnection;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.time.Instant;

@Service
public class TrackServiceImpl implements TrackService {

    @Autowired
    private TrackRepository trackRepository;

    @Autowired
    private DeviceRepository deviceRepository;

    @Autowired
    private TokenCache tokenCache; // ← Sigue usando TokenCache

    @Override
    public void fetchAndSaveTracks(Long beginTime, Long endTime) throws Exception {
        String accessToken = tokenCache.getAccessToken(); // ← Obtener token de la caché
        List<Device> devices = deviceRepository.findAll();
        if (devices.isEmpty()) {
            throw new Exception("No se encontraron dispositivos registrados.");
        }

        StringBuilder imeis = new StringBuilder();
        for (Device device : devices) {
            if (imeis.length() > 0) imeis.append(",");
            imeis.append(device.getImei());
        }
        System.out.println("🚪Se termina proceso automatico de extraccion GPS Tracks desde api protrack365");

        fetchAndSaveForImeis(imeis.toString(), beginTime, endTime, accessToken);
    }

    @Scheduled(fixedRate = 60000) // Ejecuta cada 1 minuto (60,000 milisegundos)
    public void scheduleFetchAndSaveTracks() throws Exception {
        Long beginTime = Instant.now().getEpochSecond() - 24 * 60 * 60; // Últimas 24 horas
        Long endTime = Instant.now().getEpochSecond(); // Hasta ahora

        LocalDateTime fechaHoraActual = LocalDateTime.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd-MM-yy HH:mm:ss");
        String fechaHoraFormateada = fechaHoraActual.format(formato);

        System.out.println("✅ Se inicia proceso automatico de extraccion GPS Tracks desde api protrack365 ::: " + fechaHoraFormateada);
        fetchAndSaveTracks(beginTime, endTime);
    }

    @Override
    public List<Track> getTracksByImei(String imei, Long beginTime, Long endTime) {
        if (beginTime == null) beginTime = 0L;
        if (endTime == null) endTime = System.currentTimeMillis() / 1000;
        return trackRepository.findByImeiAndTimeBetween(imei, beginTime, endTime);
    }

    private void fetchAndSaveForImeis(String imeis, Long beginTime, Long endTime, String accessToken) throws Exception {
        int page = 1;
        int pagesize = 500;
        boolean hasMore = true;

        while (hasMore) {
            URL url = new URL("https://api.protrack365.com/api/track?access_token=" + accessToken + "&imeis=" + imeis + "&begin_time=" + beginTime + "&end_time=" + endTime + "&page=" + page + "&pagesize=" + pagesize);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            if (conn.getResponseCode() == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) response.append(line);
                br.close();
                JSONObject json = new JSONObject(response.toString());
                if (json.getInt("code") == 0) {
                    JSONArray records = json.getJSONArray("record");
                    if (records.length() < pagesize) hasMore = false;
                    for (int i = 0; i < records.length(); i++) {
                        JSONObject record = records.getJSONObject(i);
                        Track track = new Track();
                        track.setImei(record.getString("imei"));
                        track.setGpstime(record.getLong("gpstime"));
                        track.setHearttime(record.optLong("hearttime", 0L));
                        track.setSystemtime(record.optLong("systemtime", 0L));
                        track.setServertime(record.optLong("servertime", 0L));
                        track.setLatitude(record.getDouble("latitude"));
                        track.setLongitude(record.getDouble("longitude"));
                        track.setSpeed(record.optDouble("speed", 0.0));
                        track.setCourse(record.optDouble("course", 0.0));
                        track.setAcctime(record.optLong("acctime", 0L));
                        track.setAccstatus(record.optBoolean("accstatus", false));
                        track.setDoorstatus(record.optInt("doorstatus", 0));
                        track.setChargestatus(record.optInt("chargestatus", 0));
                        track.setOilpowerstatus(record.optInt("oilpowerstatus", 0));
                        track.setDefencestatus(record.optInt("defencestatus", 0));
                        track.setDatastatus(record.optInt("datastatus", 0));
                        track.setBattery(record.optDouble("battery", 0.0));
                        track.setMileage(record.optLong("mileage", 0L));
                        track.setTodaymileage(record.optLong("todaymileage", 0L));
                        track.setExternalpower(record.optString("externalpower", ""));
                        track.setFuel(record.optString("fuel", ""));
                        track.setFueltime(record.optLong("fueltime", 0L));
                        track.setTemperature(record.optString("temperature", "[]"));
                        track.setTemperaturetime(record.optLong("temperaturetime", 0L));
                        if (trackRepository.findByImeiAndTimeBetween(track.getImei(), track.getGpstime(), track.getGpstime()).isEmpty()) {
                            trackRepository.save(track);
                        }
                    }
                    page++;
                } else {
                    throw new Exception("Error de API: " + json.getString("message"));
                }
            } else {
                throw new Exception("Error HTTP: " + conn.getResponseCode());
            }
        }
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TramoService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.TramoDto;

import java.util.List;

public interface TramoService {
    List<TramoDto> listarTramosPorViaje(String viajeId);
    void crearTramo(TramoDto tramoDto);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TramoServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.TramoDto;
import com.example.fleetIq.model.Tramo;
import com.example.fleetIq.model.Viaje;
import com.example.fleetIq.model.Establecimiento;
import com.example.fleetIq.repository.TramoRepository;
import com.example.fleetIq.repository.ViajeRepository;
import com.example.fleetIq.repository.EstablecimientoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class TramoServiceImpl implements TramoService {

    @Autowired
    private TramoRepository tramoRepository;

    @Autowired
    private ViajeRepository viajeRepository;

    @Autowired
    private EstablecimientoRepository establecimientoRepository;

    @Override
    public List<TramoDto> listarTramosPorViaje(String viajeId) {
        return tramoRepository.findByViajeId(viajeId).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    public void crearTramo(TramoDto tramoDto) {
        Tramo tramo = new Tramo();
        tramo.setOrden(tramoDto.getOrden());
        tramo.setTipoActividad(Tramo.TipoActividad.valueOf(tramoDto.getTipoActividad()));
        tramo.setDescripcion(tramoDto.getDescripcion());
        tramo.setHoraLlegadaProgramada(tramoDto.getHoraLlegadaProgramada());
        tramo.setHoraSalidaProgramada(tramoDto.getHoraSalidaProgramada());
        tramo.setHoraLlegadaReal(tramoDto.getHoraLlegadaReal());
        tramo.setHoraSalidaReal(tramoDto.getHoraSalidaReal());
        tramo.setEstado(Tramo.EstadoTramo.valueOf(tramoDto.getEstado()));
        tramo.setSlaMinutos(tramoDto.getSlaMinutos());
        tramo.setObservaciones(tramoDto.getObservaciones());

        // Asignar relaciones
        Viaje viaje = viajeRepository.findById(tramoDto.getViajeId())
                .orElseThrow(() -> new IllegalArgumentException("Viaje no encontrado: " + tramoDto.getViajeId()));
        tramo.setViaje(viaje);

        Establecimiento establecimientoOrigen = establecimientoRepository.findById(tramoDto.getEstablecimientoOrigenId())
                .orElseThrow(() -> new IllegalArgumentException("Establecimiento origen no encontrado: " + tramoDto.getEstablecimientoOrigenId()));
        tramo.setEstablecimientoOrigen(establecimientoOrigen);

        Establecimiento establecimientoDestino = establecimientoRepository.findById(tramoDto.getEstablecimientoDestinoId())
                .orElseThrow(() -> new IllegalArgumentException("Establecimiento destino no encontrado: " + tramoDto.getEstablecimientoDestinoId()));
        tramo.setEstablecimientoDestino(establecimientoDestino);

        tramoRepository.save(tramo);
    }

    private TramoDto convertToDto(Tramo tramo) {
        TramoDto dto = new TramoDto();
        dto.setId(tramo.getId());
        dto.setViajeId(tramo.getViaje().getId());
        dto.setOrden(tramo.getOrden());
        dto.setEstablecimientoOrigenId(tramo.getEstablecimientoOrigen().getId());
        dto.setEstablecimientoDestinoId(tramo.getEstablecimientoDestino().getId());
        dto.setTipoActividad(tramo.getTipoActividad().name());
        dto.setDescripcion(tramo.getDescripcion());
        dto.setHoraLlegadaProgramada(tramo.getHoraLlegadaProgramada());
        dto.setHoraSalidaProgramada(tramo.getHoraSalidaProgramada());
        dto.setHoraLlegadaReal(tramo.getHoraLlegadaReal());
        dto.setHoraSalidaReal(tramo.getHoraSalidaReal());
        dto.setEstado(tramo.getEstado().name());
        dto.setSlaMinutos(tramo.getSlaMinutos());
        dto.setObservaciones(tramo.getObservaciones());
        return dto;
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TransportistaService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.TransportistaInfoResponse;

public interface TransportistaService {
    TransportistaInfoResponse getTransportistaInfo(String transportistaId);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\TransportistaServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.dto.*;
import com.example.fleetIq.model.*;
import com.example.fleetIq.repository.TransportistaRepository;
import com.example.fleetIq.service.TransportistaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class TransportistaServiceImpl implements TransportistaService {

    @Autowired
    private TransportistaRepository transportistaRepository;

    @Override
    @Transactional(readOnly = true)
    public TransportistaInfoResponse getTransportistaInfo(String transportistaId) {
        Empresa empresa = transportistaRepository.findByIdAndTipoEmpresa(transportistaId, "transportista");
        if (empresa == null) {
            return null;
        }

        // Mapear camiones
        List<CamionDto> camiones = empresa.getVehiculos().stream()
                .map(v -> new CamionDto(
                        v.getPlaca(),
                        v.getMarca(),
                        v.getModelo(),
                        v.getAno(),
                        v.getCapacidadToneladas(),
                        v.getEstado()
                ))
                .collect(Collectors.toList());

        // Mapear choferes
        List<ChoferDto> choferes = empresa.getConductorEmpresas().stream()
                .map(ce -> new ChoferDto(
                        ce.getConductor().getDni(),
                        ce.getConductor().getNombre(),
                        ce.getConductor().getApellidos(),
                        ce.getConductor().getTelefono(),
                        ce.getConductor().getEmail(),
                        ce.getConductor().getLicenciaNumero(),
                        ce.getConductor().getLicenciaCategoria(),
                        ce.getConductor().getLicenciaVencimiento()
                ))
                .collect(Collectors.toList());

        // SOLUCIÓN OPTIMIZADA: Usar un Set para deduplicar clientes por ID
        Map<Empresa, Set<ClienteDto>> operadoresYClientes = empresa.getViajesComoTransportista().stream()
                .filter(viaje -> viaje.getEmpresaOperador() != null)
                .collect(Collectors.groupingBy(
                        Viaje::getEmpresaOperador,
                        Collectors.mapping(
                                viaje -> new ClienteDto(
                                        viaje.getEmpresaCliente().getId(),
                                        viaje.getEmpresaCliente().getNombre(),
                                        viaje.getEmpresaCliente().getRuc()
                                ),
                                Collectors.toCollection(() ->
                                        new TreeSet<>(Comparator.comparing(ClienteDto::getClienteId))
                                )
                        )
                ));

        List<OperadorLogisticosDto> operadoresLogisticos = operadoresYClientes.entrySet().stream()
                .map(entry -> {
                    Empresa operador = entry.getKey();
                    List<ClienteDto> clientes = new ArrayList<>(entry.getValue()); // Convertir Set a List
                    return new OperadorLogisticosDto(operador.getId(), operador.getNombre(), clientes);
                })
                .collect(Collectors.toList());

        return new TransportistaInfoResponse(
                empresa.getId(),
                empresa.getNombre(),
                empresa.getTipoEmpresa(),
                empresa.getRuc(),
                camiones,
                choferes,
                operadoresLogisticos
        );
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\ViajeService.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Viaje;
import com.example.fleetIq.dto.ViajeDto;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;

public interface ViajeService {
    Viaje guardarViaje(Viaje viaje);

    List<ViajeDto> listarTodosLosViajes();

    Page<Viaje> listarTodosLosViajesPaginado(Pageable pageable);

    // [ACTUALIZADO] Interfaz actualizada para devolver DTO
    List<ViajeDto> listarViajesPorCodigo(String codigoViaje);

    List<ViajeDto> listarViajesPorEmpresa(String empresaId);
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\service\ViajeServiceImpl.java ===

package com.example.fleetIq.service;

import com.example.fleetIq.model.Viaje;
import com.example.fleetIq.repository.ViajeRepository;
import com.example.fleetIq.dto.ViajeDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ViajeServiceImpl implements ViajeService {

    @Autowired
    private ViajeRepository viajeRepository;

    @Override
    public Viaje guardarViaje(Viaje viaje) {
        if (viaje.getFechaCreacion() == null) {
            viaje.setFechaCreacion(LocalDateTime.now());
        }
        viaje.setFechaActualizacion(LocalDateTime.now());
        return viajeRepository.save(viaje);
    }

    @Override
    public List<ViajeDto> listarTodosLosViajes() {
        return viajeRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    public Page<Viaje> listarTodosLosViajesPaginado(Pageable pageable) {
        return viajeRepository.findAll(pageable);
    }

    @Override
    public List<ViajeDto> listarViajesPorCodigo(String codigoViaje) {
        return viajeRepository.findByCodigoViaje(codigoViaje).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Override
    public List<ViajeDto> listarViajesPorEmpresa(String empresaId) {
        return viajeRepository.findByEmpresaTransportistaId(empresaId).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    private ViajeDto convertToDto(Viaje viaje) {
        ViajeDto dto = new ViajeDto();
        dto.setId(viaje.getId());
        dto.setCodigoViaje(viaje.getCodigoViaje());
        dto.setTipoOperacion(viaje.getTipoOperacion());
        dto.setDocumentoEmbarque(viaje.getDocumentoEmbarque());
        dto.setEstado(viaje.getEstado());
        dto.setFechaInicioProgramada(viaje.getFechaInicioProgramada());
        dto.setFechaFinProgramada(viaje.getFechaFinProgramada());
        dto.setFechaInicioReal(viaje.getFechaInicioReal());
        dto.setFechaFinReal(viaje.getFechaFinReal());
        dto.setObservaciones(viaje.getObservaciones());
        dto.setConfiguracionAlertas(viaje.getConfiguracionAlertas());
        dto.setFechaCreacion(viaje.getFechaCreacion());
        dto.setFechaActualizacion(viaje.getFechaActualizacion());

        // Mapeo de EmpresaTransportista
        if (viaje.getEmpresaTransportista() != null) {
            ViajeDto.EmpresaDto empresaTransportistaDto = new ViajeDto.EmpresaDto();
            empresaTransportistaDto.setId(viaje.getEmpresaTransportista().getId());
            empresaTransportistaDto.setNombre(viaje.getEmpresaTransportista().getNombre());
            empresaTransportistaDto.setTipoEmpresa(viaje.getEmpresaTransportista().getTipoEmpresa());
            empresaTransportistaDto.setRuc(viaje.getEmpresaTransportista().getRuc());
            empresaTransportistaDto.setDireccion(viaje.getEmpresaTransportista().getDireccion()); // Agregado
            empresaTransportistaDto.setTelefono(viaje.getEmpresaTransportista().getTelefono()); // Agregado
            empresaTransportistaDto.setEmail(viaje.getEmpresaTransportista().getEmail()); // Agregado
            empresaTransportistaDto.setConfiguracionAlertas(viaje.getEmpresaTransportista().getConfiguracionAlertas()); // Agregado
            empresaTransportistaDto.setConfiguracionDashboard(viaje.getEmpresaTransportista().getConfiguracionDashboard()); // Agregado
            empresaTransportistaDto.setActivo(viaje.getEmpresaTransportista().getActivo());
            empresaTransportistaDto.setFechaCreacion(viaje.getEmpresaTransportista().getFechaCreacion());
            empresaTransportistaDto.setEmpresaAdministradoraId(viaje.getEmpresaTransportista().getEmpresaAdministradora() != null ? viaje.getEmpresaTransportista().getEmpresaAdministradora().getId() : null);
            dto.setEmpresaTransportista(empresaTransportistaDto);
        }

        // Mapeo de EmpresaOperador
        if (viaje.getEmpresaOperador() != null) {
            ViajeDto.EmpresaDto empresaOperadorDto = new ViajeDto.EmpresaDto();
            empresaOperadorDto.setId(viaje.getEmpresaOperador().getId());
            empresaOperadorDto.setNombre(viaje.getEmpresaOperador().getNombre());
            empresaOperadorDto.setTipoEmpresa(viaje.getEmpresaOperador().getTipoEmpresa());
            empresaOperadorDto.setRuc(viaje.getEmpresaOperador().getRuc());
            empresaOperadorDto.setDireccion(viaje.getEmpresaOperador().getDireccion()); // Agregado
            empresaOperadorDto.setTelefono(viaje.getEmpresaOperador().getTelefono()); // Agregado
            empresaOperadorDto.setEmail(viaje.getEmpresaOperador().getEmail()); // Agregado
            empresaOperadorDto.setConfiguracionAlertas(viaje.getEmpresaOperador().getConfiguracionAlertas()); // Agregado
            empresaOperadorDto.setConfiguracionDashboard(viaje.getEmpresaOperador().getConfiguracionDashboard()); // Agregado
            empresaOperadorDto.setActivo(viaje.getEmpresaOperador().getActivo());
            empresaOperadorDto.setFechaCreacion(viaje.getEmpresaOperador().getFechaCreacion());
            empresaOperadorDto.setEmpresaAdministradoraId(viaje.getEmpresaOperador().getEmpresaAdministradora() != null ? viaje.getEmpresaOperador().getEmpresaAdministradora().getId() : null);
            dto.setEmpresaOperador(empresaOperadorDto);
        }

        // Mapeo de EmpresaCliente
        if (viaje.getEmpresaCliente() != null) {
            ViajeDto.EmpresaDto empresaClienteDto = new ViajeDto.EmpresaDto();
            empresaClienteDto.setId(viaje.getEmpresaCliente().getId());
            empresaClienteDto.setNombre(viaje.getEmpresaCliente().getNombre());
            empresaClienteDto.setTipoEmpresa(viaje.getEmpresaCliente().getTipoEmpresa());
            empresaClienteDto.setRuc(viaje.getEmpresaCliente().getRuc());
            empresaClienteDto.setDireccion(viaje.getEmpresaCliente().getDireccion()); // Agregado
            empresaClienteDto.setTelefono(viaje.getEmpresaCliente().getTelefono()); // Agregado
            empresaClienteDto.setEmail(viaje.getEmpresaCliente().getEmail()); // Agregado
            empresaClienteDto.setConfiguracionAlertas(viaje.getEmpresaCliente().getConfiguracionAlertas()); // Agregado
            empresaClienteDto.setConfiguracionDashboard(viaje.getEmpresaCliente().getConfiguracionDashboard()); // Agregado
            empresaClienteDto.setActivo(viaje.getEmpresaCliente().getActivo());
            empresaClienteDto.setFechaCreacion(viaje.getEmpresaCliente().getFechaCreacion());
            empresaClienteDto.setEmpresaAdministradoraId(viaje.getEmpresaCliente().getEmpresaAdministradora() != null ? viaje.getEmpresaCliente().getEmpresaAdministradora().getId() : null);
            dto.setEmpresaCliente(empresaClienteDto);
        }

        // Mapeo de Vehiculo
        if (viaje.getVehiculo() != null) {
            ViajeDto.VehiculoDto vehiculoDto = new ViajeDto.VehiculoDto();
            vehiculoDto.setId(viaje.getVehiculo().getId());
            vehiculoDto.setEmpresaId(viaje.getVehiculo().getEmpresa() != null ? viaje.getVehiculo().getEmpresa().getId() : null); // Corregido
            vehiculoDto.setPlaca(viaje.getVehiculo().getPlaca());
            vehiculoDto.setImei(viaje.getVehiculo().getImei());
            vehiculoDto.setMarca(viaje.getVehiculo().getMarca());
            vehiculoDto.setModelo(viaje.getVehiculo().getModelo());
            vehiculoDto.setAño(viaje.getVehiculo().getAno()); // Corregido
            vehiculoDto.setTipoVehiculo(viaje.getVehiculo().getTipoVehiculo());
            vehiculoDto.setCapacidadToneladas(viaje.getVehiculo().getCapacidadToneladas() != null ? viaje.getVehiculo().getCapacidadToneladas().doubleValue() : null); // Corregido
            vehiculoDto.setEstado(viaje.getVehiculo().getEstado());
            vehiculoDto.setActivo(viaje.getVehiculo().getActivo());
            vehiculoDto.setFechaCreacion(viaje.getVehiculo().getFechaCreacion());
            dto.setVehiculo(vehiculoDto);
        }

        // Mapeo de Carreta
        if (viaje.getCarreta() != null) {
            ViajeDto.CarretaDto carretaDto = new ViajeDto.CarretaDto();
            carretaDto.setId(viaje.getCarreta().getId());
            carretaDto.setEmpresaId(viaje.getCarreta().getEmpresaId());
            carretaDto.setPlaca(viaje.getCarreta().getPlaca());
            carretaDto.setImei(viaje.getCarreta().getImei());
            carretaDto.setMarca(viaje.getCarreta().getMarca());
            carretaDto.setModelo(viaje.getCarreta().getModelo());
            carretaDto.setAño(viaje.getCarreta().getAño());
            carretaDto.setTipoVehiculo(viaje.getCarreta().getTipoVehiculo());
            carretaDto.setCapacidadToneladas(viaje.getCarreta().getCapacidadToneladas());
            carretaDto.setEstado(viaje.getCarreta().getEstado());
            carretaDto.setActivo(viaje.getCarreta().getActivo());
            carretaDto.setFechaCreacion(viaje.getCarreta().getFechaCreacion());
            dto.setCarreta(carretaDto);
        }

        // Mapeo de Conductor
        if (viaje.getConductor() != null) {
            ViajeDto.ConductorDto conductorDto = new ViajeDto.ConductorDto();
            conductorDto.setId(viaje.getConductor().getId());
            conductorDto.setDni(viaje.getConductor().getDni());
            conductorDto.setNombre(viaje.getConductor().getNombre());
            conductorDto.setApellidos(viaje.getConductor().getApellidos());
            conductorDto.setTelefono(viaje.getConductor().getTelefono());
            conductorDto.setEmail(viaje.getConductor().getEmail());
            conductorDto.setLicenciaNumero(viaje.getConductor().getLicenciaNumero());
            conductorDto.setLicenciaCategoria(viaje.getConductor().getLicenciaCategoria());
            conductorDto.setLicenciaVencimiento(viaje.getConductor().getLicenciaVencimiento() != null ? viaje.getConductor().getLicenciaVencimiento().atStartOfDay() : null);
            conductorDto.setActivo(viaje.getConductor().getActivo());
            conductorDto.setFechaCreacion(viaje.getConductor().getFechaCreacion());
            // Mapeo de empresaId desde ConductorEmpresas
            if (viaje.getConductor().getConductorEmpresas() != null && !viaje.getConductor().getConductorEmpresas().isEmpty()) {
                conductorDto.setEmpresaId(viaje.getConductor().getConductorEmpresas().get(0).getEmpresa() != null ? viaje.getConductor().getConductorEmpresas().get(0).getEmpresa().getId() : null);
                conductorDto.setFechaInicio(viaje.getConductor().getConductorEmpresas().get(0).getFechaInicio() != null ? viaje.getConductor().getConductorEmpresas().get(0).getFechaInicio().atStartOfDay() : null);
                conductorDto.setFechaFin(viaje.getConductor().getConductorEmpresas().get(0).getFechaFin() != null ? viaje.getConductor().getConductorEmpresas().get(0).getFechaFin().atStartOfDay() : null);
            }
            dto.setConductor(conductorDto);
        }

        return dto;
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\CombinadorArchivos.java ===

package com.example.fleetIq.web;
import java.io.*;
import java.nio.file.*;
import java.util.*;

public class CombinadorArchivos {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("=== COMBINADOR DE ARCHIVOS (INCLUYE SUBCARPETAS) ===");
        System.out.print("Ingrese la ruta de la carpeta: ");
        String rutaCarpeta = scanner.nextLine();

        System.out.print("Ingrese el nombre del archivo de salida (sin extensión): ");
        String nombreSalida = scanner.nextLine();

        try {
            combinarArchivosRecursivo(rutaCarpeta, nombreSalida + ".txt");
            System.out.println("¡Proceso completado con éxito!");
        } catch (IOException e) {
            System.err.println("Error: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }

    public static void combinarArchivosRecursivo(String rutaCarpeta, String nombreArchivoSalida) throws IOException {
        File carpeta = new File(rutaCarpeta);

        // Verificar que la carpeta existe
        if (!carpeta.exists() || !carpeta.isDirectory()) {
            throw new IOException("La carpeta no existe o no es válida: " + rutaCarpeta);
        }

        // Obtener lista de todos los archivos (recursivamente)
        List<File> todosArchivos = new ArrayList<>();
        listarArchivosRecursivamente(carpeta, todosArchivos);

        if (todosArchivos.isEmpty()) {
            throw new IOException("No se encontraron archivos en la carpeta y sus subcarpetas");
        }

        // Ordenar archivos por ruta completa
        todosArchivos.sort(Comparator.comparing(File::getAbsolutePath));

        // Crear archivo de salida
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivoSalida))) {

            for (File archivo : todosArchivos) {
                if (!archivo.getName().equals(nombreArchivoSalida)) {
                    escribirArchivoConRuta(archivo, carpeta, writer);
                }
            }
        }
    }

    private static void listarArchivosRecursivamente(File carpeta, List<File> listaArchivos) {
        File[] elementos = carpeta.listFiles();

        if (elementos != null) {
            for (File elemento : elementos) {
                if (elemento.isFile()) {
                    listaArchivos.add(elemento);
                } else if (elemento.isDirectory()) {
                    listarArchivosRecursivamente(elemento, listaArchivos);
                }
            }
        }
    }

    private static void escribirArchivoConRuta(File archivo, File carpetaRaiz, BufferedWriter writer) throws IOException {
        // Obtener ruta relativa para mostrar la estructura de carpetas
        String rutaRelativa = carpetaRaiz.toPath().relativize(archivo.toPath()).toString();

        // Escribir encabezado con la ruta del archivo
        writer.write("=== ARCHIVO: " + rutaRelativa + " ===");
        writer.newLine();
        writer.newLine();

        // Leer y escribir contenido del archivo
        try (BufferedReader reader = new BufferedReader(new FileReader(archivo))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                writer.write(linea);
                writer.newLine();
            }
        } catch (IOException e) {
            writer.write("ERROR: No se pudo leer este archivo - " + e.getMessage());
            writer.newLine();
        }

        // Escribir separador entre archivos
        writer.newLine();
        writer.write("=".repeat(60));
        writer.newLine();
        writer.newLine();
    }
}

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\app.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FleetIQ Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Check if Leaflet is loaded
        if (typeof L === 'undefined') {
            console.error('Leaflet failed to load. Check network tab.');
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; width: 100%; display: block; } /* Ensure visibility */
        table { width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .hidden { display: none; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<!-- Navigation Menu -->
<nav class="bg-blue-600 text-white p-4 mb-4 rounded">
    <ul class="flex space-x-4">
        <li><a href="#" class="font-bold hover:underline" onclick="showView('tracks')">Tracks</a></li>
        <li><a href="#" class="font-bold hover:underline" onclick="showView('geofences')">Geofences</a></li>
    </ul>
</nav>

<!-- Tracks Section -->
<div id="tracksSection" class="view">
    <h1 class="text-2xl font-bold mb-4">Device Tracks</h1>
    <div class="mb-4">
        <form id="filterForm" class="flex space-x-4">
            <div>
                <label for="beginTime" class="block text-sm font-medium">Start Time (YYYY-MM-DD HH:MM)</label>
                <input type="datetime-local" id="beginTime" class="border rounded p-1">
            </div>
            <div>
                <label for="endTime" class="block text-sm font-medium">End Time (YYYY-MM-DD HH:MM)</label>
                <input type="datetime-local" id="endTime" class="border rounded p-1">
            </div>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Filter</button>
        </form>
    </div>
    <div id="map" class="mb-4"></div>
    <table class="table-auto">
        <thead>
        <tr>
            <th>IMEI</th>
            <th>Device Name</th>
            <th>Track Count</th>
        </tr>
        </thead>
        <tbody id="deviceTable"></tbody>
    </table>
</div>

<!-- Geofences Section -->
<div id="geofencesSection" class="view hidden">
    <h1 class="text-2xl font-bold mb-4">Geofence Management</h1>
    <div class="mb-4">
        <h2 class="text-xl mb-2">Create Geofence</h2>
        <form id="geofenceForm" class="space-y-2">
            <div>
                <label for="imei" class="block text-sm font-medium">IMEI (Device)</label>
                <select id="imei" class="border rounded p-1 w-full"></select>
            </div>
            <div>
                <label for="name" class="block text-sm font-medium">Name</label>
                <input type="text" id="name" class="border rounded p-1 w-full" required>
            </div>
            <div>
                <label for="alarmtype" class="block text-sm font-medium">Alarm Type (0: Out, 1: In, 2: In/Out)</label>
                <select id="alarmtype" class="border rounded p-1 w-full">
                    <option value="0">Out</option>
                    <option value="1">In</option>
                    <option value="2">In/Out</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium">Draw Polygon (Click to add points, double-click to finish)</label>
                <input type="hidden" id="points" name="points">
                <p id="pointsInfo" class="text-sm text-gray-500">Draw your polygon on the map below.</p>
            </div>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create Geofence</button>
        </form>
    </div>
    <h2 class="text-xl mb-2">Geofence List</h2>
    <table class="table-auto">
        <thead>
        <tr>
            <th>ID</th>
            <th>IMEI</th>
            <th>Name</th>
            <th>Alarm Type</th>
            <th>Point Count</th>
        </tr>
        </thead>
        <tbody id="geofenceTable"></tbody>
    </table>
</div>

<script>
    let map = null;
    let drawnItems = null;
    let drawControl = null;

    // Initialize or reinitialize map with retry
    function initializeMap(maxRetries = 3, retryCount = 0) {
        if (map) {
            map.remove(); // Remove existing map instance
        }
        const mapElement = document.getElementById('map');
        if (!mapElement) {
            console.error('Map element not found');
            return Promise.resolve(null);
        }
        try {
            map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
            map.invalidateSize(); // Force resize to ensure rendering
            console.log('Map initialized successfully');
            return Promise.resolve(map);
        } catch (e) {
            console.error('Map initialization failed:', e);
            if (retryCount < maxRetries) {
                console.log(`Retrying map initialization (${retryCount + 1}/${maxRetries})...`);
                return new Promise(resolve => setTimeout(() => resolve(initializeMap(maxRetries, retryCount + 1)), 300));
            }
            return Promise.resolve(null);
        }
    }

    // View switching
    async function showView(view) {
        document.querySelectorAll('.view').forEach(section => section.classList.add('hidden'));
        document.getElementById(`${view}Section`).classList.remove('hidden');
        map = await initializeMap(); // Await and assign map
        if (!map) {
            console.error('Map initialization failed after retries');
            alert('Failed to load map. Please refresh the page.');
            return;
        }
        console.log('Map assigned to view:', view);
        if (view === 'tracks') {
            fetchTracks(); // Load tracks on switch
        } else if (view === 'geofences') {
            setTimeout(() => {
                fetchGeofences(); // Load geofences on switch with delay
                fetchDevices(); // Populate IMEI dropdown
                initializeDrawControl(); // Initialize Leaflet Draw for polygons
            }, 300); // Increased delay to 300ms
        }
    }

    // Initialize Leaflet Draw for polygons
    function initializeDrawControl() {
        if (!map) {
            console.error('Map is not initialized for Draw control');
            return;
        }
        if (drawnItems) {
            map.removeLayer(drawnItems);
        }
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        if (typeof L.Control.Draw === 'undefined') {
            console.error('Leaflet Draw failed to load. Check network tab.');
            return;
        }

        drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: {
                        color: '#e1e100',
                        message: '<strong>Oh snap!</strong> You can\'t draw that!'
                    },
                    shapeOptions: {
                        color: '#bada55'
                    }
                },
                polyline: false,
                circle: false,
                rectangle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: drawnItems,
                remove: false
            }
        });
        map.addControl(drawControl);

        map.on('draw:created', function (e) {
            const type = e.layerType;
            const layer = e.layer;

            if (type === 'polygon') {
                if (drawnItems.getLayers().length > 0) {
                    drawnItems.clearLayers(); // Remove previous polygon
                }
                drawnItems.addLayer(layer);
                const coords = layer.getLatLngs()[0].map(ll => [ll.lat, ll.lng]); // Get [lat, lon] array
                if (coords.length < 3) {
                    alert('Polygon must have at least 3 points.');
                    drawnItems.clearLayers();
                    return;
                }
                document.getElementById('points').value = JSON.stringify(coords); // Set hidden input
                document.getElementById('pointsInfo').textContent = `Polygon drawn with ${coords.length} points. Ready to submit.`;
            }
        });
    }

    // Tracks: Generate random color
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    // Tracks: Format Unix timestamp
    function formatDate(timestamp) {
        return new Date(timestamp * 1000).toLocaleString('en-US', { timeZone: 'America/Lima' });
    }

    // Tracks: Fetch and display tracks
    async function fetchTracks(beginTime, endTime) {
        if (!map) {
            console.error('Map is not initialized for tracks');
            return;
        }
        const url = new URL('http://localhost:8080/api/tracks');
        if (beginTime) url.searchParams.append('beginTime', beginTime);
        if (endTime) url.searchParams.append('endTime', endTime);

        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();

            // Clear map layers (except tile layer)
            map.eachLayer(layer => {
                if (layer instanceof L.Polyline || layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            // Clear table
            document.getElementById('deviceTable').innerHTML = '';

            const bounds = L.latLngBounds();

            data.forEach(device => {
                const color = getRandomColor();
                const tracks = device.tracks;

                // Add row to table
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${device.imei}</td>
                        <td>${device.deviceName || 'Unknown'}</td>
                        <td>${tracks.length}</td>
                    `;
                document.getElementById('deviceTable').appendChild(row);

                // Plot tracks on map
                if (tracks.length > 0) {
                    const coords = tracks.map(track => [track.latitude, track.longitude]);
                    const polyline = L.polyline(coords, { color }).addTo(map);

                    tracks.forEach(track => {
                        L.marker([track.latitude, track.longitude])
                            .addTo(map)
                            .bindPopup(`
                                    <b>Device: ${device.deviceName || device.imei}</b><br>
                                    Time: ${formatDate(track.time)}<br>
                                    Latitude: ${track.latitude}<br>
                                    Longitude: ${track.longitude}<br>
                                    Speed: ${track.speed} km/h<br>
                                    Direction: ${track.direction}°<br>
                                    ACC Status: ${track.accStatus}<br>
                                    Voltage: ${track.voltage} mV
                                `);
                    });

                    bounds.extend(polyline.getBounds());
                }
            });

            if (data.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error fetching tracks:', error);
            alert('Failed to load tracks: ' + error.message);
        }
    }

    // Tracks: Handle filter form submission
    document.getElementById('filterForm').addEventListener('submit', event => {
        event.preventDefault();
        const beginTime = document.getElementById('beginTime').value
            ? Math.floor(new Date(document.getElementById('beginTime').value).getTime() / 1000)
            : null;
        const endTime = document.getElementById('endTime').value
            ? Math.floor(new Date(document.getElementById('endTime').value).getTime() / 1000)
            : null;
        fetchTracks(beginTime, endTime);
    });

    // Geofences: Fetch devices for dropdown
    async function fetchDevices() {
        try {
            const response = await fetch('http://localhost:8080/api/devices');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            select.innerHTML = ''; // Clear existing options
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error fetching devices:', error);
            alert('Failed to load devices: ' + error.message);
        }
    }

    // Geofences: Fetch and display geofences
    async function fetchGeofences() {
        if (!map) {
            console.error('Map is not initialized for geofences');
            return;
        }
        console.log('Fetching geofences with map:', map);
        try {
            const response = await fetch('http://localhost:8080/api/geofences');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            // Clear map layers (except tile layer)
            map.eachLayer(layer => {
                if (layer instanceof L.Polygon || layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            const bounds = L.latLngBounds();

            data.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => [p[0], p[1]]); // Convert to [lat, lon] array

                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${geofence.id}</td>
                        <td>${geofence.imei}</td>
                        <td>${geofence.name}</td>
                        <td>${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}</td>
                        <td>${points.length}</td>
                    `;
                tableBody.appendChild(row);

                const polygon = L.polygon(coords, {
                    color: 'yellow',
                    fillColor: 'yellow',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`
                        <b>${geofence.name}</b><br>
                        IMEI: ${geofence.imei}<br>
                        Alarm Type: ${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}
                    `);

                bounds.extend(polygon.getBounds());
            });

            if (data.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error fetching geofences:', error);
            alert('Failed to load geofences: ' + error.message);
        }
    }

    // Geofences: Handle form submission
    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const points = document.getElementById('points').value;
        if (!points || JSON.parse(points).length < 3) {
            alert('Please draw a polygon with at least 3 points.');
            return;
        }

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            points: points
        };

        try {
            const response = await fetch('http://localhost:8080/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geofence created successfully');
                fetchGeofences(); // Refresh list and map
                this.reset();
                document.getElementById('pointsInfo').textContent = 'Draw your polygon on the map below.';
                if (drawnItems) {
                    drawnItems.clearLayers();
                }
            } else {
                alert('Error creating geofence: ' + await response.text());
            }
        } catch (error) {
            console.error('Error creating geofence:', error);
            alert('Error: ' + error.message);
        }
    });

    // Initialize: Show tracks view and load tracks
    showView('tracks');
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\geofence.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geofence Management</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; }
        table { width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Geofence Management</h1>

<div class="mb-4">
    <h2 class="text-xl mb-2">Create Geofence</h2>
    <form id="geofenceForm" class="space-y-2">
        <div>
            <label for="imei" class="block text-sm font-medium">IMEI (Device)</label>
            <select id="imei" class="border rounded p-1 w-full"></select>
        </div>
        <div>
            <label for="name" class="block text-sm font-medium">Name</label>
            <input type="text" id="name" class="border rounded p-1 w-full" required>
        </div>
        <div>
            <label for="alarmtype" class="block text-sm font-medium">Alarm Type (0: Out, 1: In, 2: In/Out)</label>
            <select id="alarmtype" class="border rounded p-1 w-full">
                <option value="0">Out</option>
                <option value="1">In</option>
                <option value="2">In/Out</option>
            </select>
        </div>
        <div>
            <label for="latitude" class="block text-sm font-medium">Latitude (Click on map to set)</label>
            <input type="number" id="latitude" class="border rounded p-1 w-full" readonly>
        </div>
        <div>
            <label for="longitude" class="block text-sm font-medium">Longitude (Click on map to set)</label>
            <input type="number" id="longitude" class="border rounded p-1 w-full" readonly>
        </div>
        <div>
            <label for="radius" class="block text-sm font-medium">Radius (100-5000 meters)</label>
            <input type="number" id="radius" class="border rounded p-1 w-full" min="100" max="5000" required>
        </div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create Geofence</button>
    </form>
</div>

<div id="map" class="mb-4"></div>

<h2 class="text-xl mb-2">Existing Geofences</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Name</th>
        <th>Alarm Type</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Radius</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    // Initialize Leaflet map
    const map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    let currentMarker = null;
    let currentCircle = null;

    // Click on map to set center
    map.on('click', function(e) {
        const lat = e.latlng.lat;
        const lon = e.latlng.lng;
        document.getElementById('latitude').value = lat;
        document.getElementById('longitude').value = lon;

        // Remove previous marker and circle
        if (currentMarker) map.removeLayer(currentMarker);
        if (currentCircle) map.removeLayer(currentCircle);

        // Add marker
        currentMarker = L.marker([lat, lon]).addTo(map);

        // Preview circle if radius is set
        const radius = parseInt(document.getElementById('radius').value);
        if (!isNaN(radius)) {
            currentCircle = L.circle([lat, lon], { radius }).addTo(map);
        }
    });

    // Update preview circle when radius changes
    document.getElementById('radius').addEventListener('input', function() {
        const radius = parseInt(this.value);
        const lat = parseFloat(document.getElementById('latitude').value);
        const lon = parseFloat(document.getElementById('longitude').value);

        if (!isNaN(radius) && !isNaN(lat) && !isNaN(lon)) {
            if (currentCircle) map.removeLayer(currentCircle);
            currentCircle = L.circle([lat, lon], { radius }).addTo(map);
        }
    });

    // Fetch devices for dropdown
    async function fetchDevices() {
        try {
            const response = await fetch('http://localhost:8080/api/devices');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error fetching devices:', error);
            alert('Failed to load devices: ' + error.message);
        }
    }

    // Fetch and display existing geofences
    async function fetchGeofences() {
        try {
            const response = await fetch('http://localhost:8080/api/geofences');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            data.forEach(geofence => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${geofence.id}</td>
                        <td>${geofence.imei}</td>
                        <td>${geofence.name}</td>
                        <td>${geofence.alarmtype}</td>
                        <td>${geofence.latitude}</td>
                        <td>${geofence.longitude}</td>
                        <td>${geofence.radius}</td>
                    `;
                tableBody.appendChild(row);

                // Draw circle on map
                L.circle([geofence.latitude, geofence.longitude], {
                    radius: geofence.radius,
                    color: 'blue',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`<b>${geofence.name}</b><br>IMEI: ${geofence.imei}<br>Alarm Type: ${geofence.alarmtype}`);
            });
        } catch (error) {
            console.error('Error fetching geofences:', error);
            alert('Failed to load geofences: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            latitude: parseFloat(document.getElementById('latitude').value),
            longitude: parseFloat(document.getElementById('longitude').value),
            radius: parseInt(document.getElementById('radius').value)
        };

        try {
            const response = await fetch('http://localhost:8080/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geofence created successfully');
                fetchGeofences(); // Refresh list and map
                this.reset(); // Reset form
                if (currentMarker) map.removeLayer(currentMarker);
                if (currentCircle) map.removeLayer(currentCircle);
            } else {
                alert('Error creating geofence: ' + await response.text());
            }
        } catch (error) {
            console.error('Error creating geofence:', error);
            alert('Error: ' + error.message);
        }
    });

    // Load devices and geofences on page load
    fetchDevices();
    fetchGeofences();
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\geofence2.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Point Geofence Creator</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Check if Leaflet is loaded
        if (typeof L === 'undefined') {
            console.error('Leaflet failed to load. Check network tab.');
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; width: 100%; display: block; }
        table { width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Multi-Point Geofence Creator</h1>
<div class="mb-4">
    <h2 class="text-xl mb-2">Create Geofence</h2>
    <form id="geofenceForm" class="space-y-2">
        <div>
            <label for="imei" class="block text-sm font-medium">IMEI (Device)</label>
            <select id="imei" class="border rounded p-1 w-full"></select>
        </div>
        <div>
            <label for="name" class="block text-sm font-medium">Name</label>
            <input type="text" id="name" class="border rounded p-1 w-full" required>
        </div>
        <div>
            <label for="alarmtype" class="block text-sm font-medium">Alarm Type (0: Out, 1: In, 2: In/Out)</label>
            <select id="alarmtype" class="border rounded p-1 w-full">
                <option value="0">Out</option>
                <option value="1">In</option>
                <option value="2">In/Out</option>
            </select>
        </div>
        <div>
            <label class="block text-sm font-medium">Draw Polygon (Click to add points, double-click to finish)</label>
            <input type="hidden" id="points" name="points">
            <p id="pointsInfo" class="text-sm text-gray-500">Draw your polygon on the map below.</p>
        </div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create Geofence</button>
    </form>
</div>
<div id="map" class="mb-4"></div>
<h2 class="text-xl mb-2">Geofence List</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Name</th>
        <th>Alarm Type</th>
        <th>Point Count</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    let map = null;
    let drawnItems = null;
    let drawControl = null;

    // Initialize map with promise
    function initializeMap() {
        return new Promise((resolve) => {
            map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);
            map.invalidateSize(); // Force resize to ensure rendering
            console.log('Map initialized successfully with object:', map);
            resolve(map);
        });
    }

    // Initialize Leaflet Draw for polygons
    function initializeDrawControl() {
        if (!map) {
            console.error('Map is not initialized for Draw control');
            return;
        }
        console.log('Initializing Draw control with map:', map);
        if (drawnItems) {
            map.removeLayer(drawnItems);
        }
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        if (typeof L.Control.Draw === 'undefined') {
            console.error('Leaflet Draw failed to load. Check network tab.');
            return;
        }

        drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: {
                        color: '#e1e100',
                        message: '<strong>Oh snap!</strong> You can\'t draw that!'
                    },
                    shapeOptions: {
                        color: '#bada55'
                    }
                },
                polyline: false,
                circle: false,
                rectangle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: drawnItems,
                remove: false
            }
        });
        map.addControl(drawControl); // Ensure control is added to map
        console.log('Draw control initialized successfully');
    }

    // Fetch devices for dropdown
    async function fetchDevices() {
        try {
            const response = await fetch('http://localhost:8080/api/devices');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            select.innerHTML = ''; // Clear existing options
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error fetching devices:', error);
            alert('Failed to load devices: ' + error.message);
        }
    }

    // Fetch and display geofences
    async function fetchGeofences() {
        if (!map) {
            console.error('Map is not initialized for geofences');
            return;
        }
        console.log('Fetching geofences with map:', map);
        try {
            const response = await fetch('http://localhost:8080/api/geofences');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            // Clear map layers (except tile layer)
            map.eachLayer(layer => {
                if (layer instanceof L.Polygon || layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            const bounds = L.latLngBounds();

            data.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => [p[0], p[1]]); // Convert to [lat, lon] array

                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${geofence.id}</td>
                        <td>${geofence.imei}</td>
                        <td>${geofence.name}</td>
                        <td>${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}</td>
                        <td>${points.length}</td>
                    `;
                tableBody.appendChild(row);

                const polygon = L.polygon(coords, {
                    color: 'yellow',
                    fillColor: 'yellow',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`
                        <b>${geofence.name}</b><br>
                        IMEI: ${geofence.imei}<br>
                        Alarm Type: ${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}
                    `);

                bounds.extend(polygon.getBounds());
            });

            if (data.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error fetching geofences:', error);
            alert('Failed to load geofences: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const points = document.getElementById('points').value;
        if (!points || JSON.parse(points).length < 3) {
            alert('Please draw a polygon with at least 3 points.');
            return;
        }

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            points: points
        };

        try {
            const response = await fetch('http://localhost:8080/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geofence created successfully');
                fetchGeofences(); // Refresh list and map
                this.reset();
                document.getElementById('pointsInfo').textContent = 'Draw your polygon on the map below.';
                if (drawnItems) {
                    drawnItems.clearLayers();
                }
            } else {
                alert('Error creating geofence: ' + await response.text());
            }
        } catch (error) {
            console.error('Error creating geofence:', error);
            alert('Error: ' + error.message);
        }
    });

    // Initialize on load
    document.addEventListener('DOMContentLoaded', async () => {
        const mapInstance = await initializeMap();
        if (mapInstance) {
            map = mapInstance; // Assign to global map
            console.log('Map assigned globally:', map);
            initializeDrawControl();
            await fetchDevices();
            await fetchGeofences();
        } else {
            console.error('Map initialization failed');
            alert('Failed to load map. Please refresh the page.');
        }
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\index.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Tracks</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Tailwind CSS embebido para desarrollo (no usar en producción)
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        clifford: '#da373d',
                    }
                }
            }
        }
    </script>
    <style>
        #map { height: 500px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .bg-gray-100 { background-color: #f7fafc; }
        .p-4 { padding: 1rem; }
        .mb-4 { margin-bottom: 1rem; }
        .flex { display: flex; }
        .space-x-4 > * + * { margin-left: 1rem; }
        .block { display: block; }
        .text-sm { font-size: 0.875rem; }
        .font-medium { font-weight: 500; }
        .border { border-width: 1px; border-style: solid; border-color: #e2e8f0; }
        .rounded { border-radius: 0.25rem; }
        .p-1 { padding: 0.25rem; }
        .bg-blue-500 { background-color: #3b82f6; }
        .text-white { color: white; }
        .px-4 { padding-left: 1rem; padding-right: 1rem; }
        .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .hover\:bg-blue-600:hover { background-color: #2563eb; }
        .text-2xl { font-size: 1.5rem; }
        .font-bold { font-weight: 700; }
        .text-center { text-align: center; }
    </style>
</head>
<body class="container bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Device Tracks</h1>

<div class="mb-4">
    <form id="filterForm" class="flex space-x-4">
        <div>
            <label for="imei" class="block text-sm font-medium">Select IMEI</label>
            <select id="imei" class="border rounded p-1">
                <!-- Populated dynamically -->
            </select>
        </div>
        <div>
            <label for="beginTime" class="block text-sm font-medium">Start Time (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="beginTime" class="border rounded p-1">
        </div>
        <div>
            <label for="endTime" class="block text-sm font-medium">End Time (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="endTime" class="border rounded p-1">
        </div>
        <div style="align-self: flex-end;">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Filter</button>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>

<table class="table-auto">
    <thead>
    <tr>
        <th>IMEI</th>
        <th>Time</th>
        <th>Latitude</th>
        <th>Longitude</th>
    </tr>
    </thead>
    <tbody id="deviceTable"></tbody>
</table>

<script>
    // Initialize Leaflet map
    const map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Store geofence layers to manage them
    let geofenceLayers = [];
    // Store track layers to manage them
    let trackLayers = [];

    // Generate random color for each device or geofence
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    // Format Unix timestamp to local datetime
    function formatDate(timestamp) {
        return new Date(timestamp * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' });
    }

    // Fetch IMEIs for dropdown
    async function fetchImeis() {
        const baseUrl = 'http://localhost:8080';
        const url = new URL('/api/devices', baseUrl);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const devices = await response.json();

            const select = document.getElementById('imei');
            // Clear existing options
            select.innerHTML = '';

            // Add default option
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Select IMEI';
            select.appendChild(defaultOption);

            devices.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = device.imei;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar IMEIs:', error);
            alert('No se pudieron cargar los IMEIs: ' + error.message);
        }
    }

    // Fetch geofences from the API
    async function fetchGeofences() {
        const baseUrl = 'http://localhost:8080';
        const url = new URL('/api/geofences', baseUrl);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const geofences = await response.json();
            return geofences;
        } catch (error) {
            console.error('Error al cargar geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
            return [];
        }
    }

    // Calculate center point from polygon points
    function calculateCenter(pointsArray) {
        if (!pointsArray || pointsArray.length === 0) return null;

        let minLat = pointsArray[0][0];
        let maxLat = pointsArray[0][0];
        let minLng = pointsArray[0][1];
        let maxLng = pointsArray[0][1];

        for (let i = 1; i < pointsArray.length; i++) {
            const [lat, lng] = pointsArray[i];
            minLat = Math.min(minLat, lat);
            maxLat = Math.max(maxLat, lat);
            minLng = Math.min(minLng, lng);
            maxLng = Math.max(maxLng, lng);
        }

        return [(minLat + maxLat) / 2, (minLng + maxLng) / 2];
    }

    // Calculate approximate radius from polygon points
    function calculateRadius(pointsArray, center) {
        if (!pointsArray || pointsArray.length === 0 || !center) return 0;

        let maxDistance = 0;
        for (let i = 0; i < pointsArray.length; i++) {
            const [lat, lng] = pointsArray[i];
            const distance = Math.sqrt(
                Math.pow(lat - center[0], 2) +
                Math.pow(lng - center[1], 2)
            );
            maxDistance = Math.max(maxDistance, distance);
        }

        // Convert to meters (approximate)
        return maxDistance * 111320;
    }

    // Display geofences on the map
    function displayGeofences(geofences) {
        // Clear existing geofence layers
        geofenceLayers.forEach(layer => map.removeLayer(layer));
        geofenceLayers = [];

        // Add new geofences with validation
        geofences.forEach(geofence => {
            const { name, points } = geofence;

            // Parse points if it's a string
            let pointsArray;
            try {
                pointsArray = typeof points === 'string' ? JSON.parse(points) : points;
            } catch (e) {
                console.error('Error parsing geofence points:', e);
                return;
            }

            if (!Array.isArray(pointsArray) || pointsArray.length === 0) {
                console.error('Geofence con puntos inválidos:', geofence);
                return;
            }

            const center = calculateCenter(pointsArray);
            if (!center) {
                console.error('No se pudo calcular el centro de la geocerca:', geofence);
                return;
            }

            const radius = calculateRadius(pointsArray, center);
            const color = getRandomColor();

            // Create a polygon for the geofence instead of circle
            const geofencePolygon = L.polygon(pointsArray, {
                color: color,
                fillColor: color,
                fillOpacity: 0.2
            }).addTo(map);

            // Add popup with geofence details
            geofencePolygon.bindPopup(`
                <b>Geocerca: ${name}</b><br>
                Tipo: ${geofence.alarmtype === 1 ? 'Entrada' : 'Salida'}<br>
                Puntos: ${pointsArray.length}
            `);

            geofenceLayers.push(geofencePolygon);
        });
    }

    // Clear all track layers from map
    function clearTrackLayers() {
        trackLayers.forEach(layer => map.removeLayer(layer));
        trackLayers = [];
    }

    // Fetch and display tracks for selected IMEI
    async function fetchTracks(imei, beginTime, endTime) {
        if (!imei) {
            alert('Por favor seleccione un IMEI');
            return;
        }

        const baseUrl = 'http://localhost:8080';
        const url = new URL('/api/tracks', baseUrl);
        url.searchParams.append('imei', imei);
        if (beginTime) url.searchParams.append('beginTime', beginTime);
        if (endTime) url.searchParams.append('endTime', endTime);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const data = await response.json();

            // Clear existing track layers
            clearTrackLayers();

            // Process tracks if we have data
            if (data && data.length > 0) {
                const color = getRandomColor();
                const coords = data.map(track => {
                    // Validate track coordinates
                    if (track.latitude === undefined || track.longitude === undefined ||
                        isNaN(track.latitude) || isNaN(track.longitude)) {
                        console.error('Track con coordenadas inválidas:', track);
                        return null;
                    }
                    return [track.latitude, track.longitude];
                }).filter(coord => coord !== null); // Filter out invalid coordinates

                if (coords.length > 0) {
                    const polyline = L.polyline(coords, { color }).addTo(map);
                    trackLayers.push(polyline);

                    // Add popup to each track point
                    data.forEach(track => {
                        // Validate track coordinates before creating marker
                        if (track.latitude !== undefined && track.longitude !== undefined &&
                            !isNaN(track.latitude) && !isNaN(track.longitude)) {
                            const marker = L.marker([track.latitude, track.longitude])
                                .addTo(map)
                                .bindPopup(`
                                    <b>IMEI: ${imei}</b><br>
                                    Fecha: ${formatDate(track.gpstime)}<br>
                                    Latitud: ${track.latitude}<br>
                                    Longitud: ${track.longitude}
                                `);
                            trackLayers.push(marker);
                        }
                    });

                    // Fit map to bounds of this device's tracks
                    map.fitBounds(coords);
                }
            }

            // Populate table
            const tableBody = document.getElementById('deviceTable');
            tableBody.innerHTML = ''; // Clear table

            if (data && data.length > 0) {
                data.forEach(track => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${imei}</td>
                        <td>${formatDate(track.gpstime)}</td>
                        <td>${track.latitude !== undefined ? track.latitude : 'N/A'}</td>
                        <td>${track.longitude !== undefined ? track.longitude : 'N/A'}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="4" class="text-center">No se encontraron datos para el IMEI seleccionado</td>`;
                tableBody.appendChild(row);
            }

            // Fetch and display geofences
            const geofences = await fetchGeofences();
            displayGeofences(geofences);
        } catch (error) {
            console.error('Error al cargar tracks:', error);
            alert('No se pudieron cargar los tracks: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('filterForm').addEventListener('submit', event => {
        event.preventDefault();
        const imei = document.getElementById('imei').value;
        const beginTime = document.getElementById('beginTime').value
            ? Math.floor(new Date(document.getElementById('beginTime').value).getTime() / 1000)
            : null;
        const endTime = document.getElementById('endTime').value
            ? Math.floor(new Date(document.getElementById('endTime').value).getTime() / 1000)
            : null;
        fetchTracks(imei, beginTime, endTime);
    });

    // Load IMEI options and geofences on page load
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchImeis();
        const geofences = await fetchGeofences();
        displayGeofences(geofences);
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\index2.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geocercas y Tracks</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="container bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Geocercas y Tracks</h1>

<div class="mb-4">
    <form id="filterForm" class="flex space-x-4">
        <div>
            <label for="imei" class="block text-sm font-medium">Seleccionar IMEI</label>
            <select id="imei" class="border rounded p-1">
                <!-- Populated dynamically -->
            </select>
        </div>
        <div>
            <label for="beginTime" class="block text-sm font-medium">Fecha Inicio (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="beginTime" class="border rounded p-1">
        </div>
        <div>
            <label for="endTime" class="block text-sm font-medium">Fecha Fin (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="endTime" class="border rounded p-1">
        </div>
        <div style="align-self: flex-end;">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Filtrar</button>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>

<table class="table-auto">
    <thead>
    <tr>
        <th>IMEI</th>
        <th>Fecha</th>
        <th>Latitud</th>
        <th>Longitud</th>
    </tr>
    </thead>
    <tbody id="deviceTable"></tbody>
</table>

<script>
    // Initialize Leaflet map
    const map = L.map('map').setView([-8.0, -79.0], 6); // Centro en Perú
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Store geofence layers to manage them
    let geofenceLayers = [];
    // Store track layers to manage them
    let trackLayers = [];

    // Generate random color for each device or geofence
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    // Format Unix timestamp to local datetime
    function formatDate(timestamp) {
        return new Date(timestamp * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' });
    }

    // Fetch IMEIs for dropdown
    async function fetchImeis() {
        const baseUrl = ''; // Usa rutas relativas
        const url = new URL('/api/devices', baseUrl);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const devices = await response.json();

            const select = document.getElementById('imei');
            select.innerHTML = '';

            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Seleccionar IMEI';
            select.appendChild(defaultOption);

            devices.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = device.imei;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar IMEIs:', error);
            alert('No se pudieron cargar los IMEIs: ' + error.message);
        }
    }

    // Fetch geofences from the API
    async function fetchGeofences() {
        const baseUrl = ''; // Usa rutas relativas
        const url = new URL('/api/geofences', baseUrl);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const geofences = await response.json();
            return geofences;
        } catch (error) {
            console.error('Error al cargar geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
            return [];
        }
    }

    // Display geofences on the map
    function displayGeofences(geofences) {
        geofenceLayers.forEach(layer => map.removeLayer(layer));
        geofenceLayers = [];

        geofences.forEach(geofence => {
            const { name, points, alarmtype } = geofence;

            let pointsArray;
            try {
                pointsArray = typeof points === 'string' ? JSON.parse(points) : points;
            } catch (e) {
                console.error('Error al parsear puntos de geocerca:', e);
                return;
            }

            if (!Array.isArray(pointsArray) || pointsArray.length === 0) {
                console.error('Geocerca con puntos inválidos:', geofence);
                return;
            }

            const color = getRandomColor();
            const geofencePolygon = L.polygon(pointsArray, {
                color: color,
                fillColor: color,
                fillOpacity: 0.2
            }).addTo(map);

            geofencePolygon.bindPopup(`
                <b>Geocerca: ${name}</b><br>
                Tipo: ${alarmtype === 1 ? 'Entrada' : 'Salida'}<br>
                Puntos: ${pointsArray.length}
            `);

            geofenceLayers.push(geofencePolygon);
        });
    }

    // Clear all track layers from map
    function clearTrackLayers() {
        trackLayers.forEach(layer => map.removeLayer(layer));
        trackLayers = [];
    }

    // Fetch and display tracks for selected IMEI
    async function fetchTracks(imei, beginTime, endTime) {
        if (!imei) {
            alert('Por favor seleccione un IMEI');
            return;
        }

        const baseUrl = ''; // Usa rutas relativas
        const url = new URL('/api/tracks', baseUrl);
        url.searchParams.append('imei', imei);
        if (beginTime) url.searchParams.append('beginTime', beginTime);
        if (endTime) url.searchParams.append('endTime', endTime);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const data = await response.json();

            clearTrackLayers();

            if (data && data.length > 0) {
                const color = getRandomColor();
                const coords = data.map(track => {
                    if (track.latitude === undefined || track.longitude === undefined ||
                        isNaN(track.latitude) || isNaN(track.longitude)) {
                        console.error('Track con coordenadas inválidas:', track);
                        return null;
                    }
                    return [track.latitude, track.longitude];
                }).filter(coord => coord !== null);

                if (coords.length > 0) {
                    const polyline = L.polyline(coords, { color }).addTo(map);
                    trackLayers.push(polyline);

                    data.forEach(track => {
                        if (track.latitude !== undefined && track.longitude !== undefined &&
                            !isNaN(track.latitude) && !isNaN(track.longitude)) {
                            const marker = L.marker([track.latitude, track.longitude])
                                .addTo(map)
                                .bindPopup(`
                                    <b>IMEI: ${imei}</b><br>
                                    Fecha: ${formatDate(track.gpstime)}<br>
                                    Latitud: ${track.latitude}<br>
                                    Longitud: ${track.longitude}
                                `);
                            trackLayers.push(marker);
                        }
                    });

                    map.fitBounds(coords);
                }
            }

            const tableBody = document.getElementById('deviceTable');
            tableBody.innerHTML = '';

            if (data && data.length > 0) {
                data.forEach(track => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${imei}</td>
                        <td>${formatDate(track.gpstime)}</td>
                        <td>${track.latitude !== undefined ? track.latitude : 'N/A'}</td>
                        <td>${track.longitude !== undefined ? track.longitude : 'N/A'}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="4" class="text-center">No se encontraron datos para el IMEI seleccionado</td>`;
                tableBody.appendChild(row);
            }

            const geofences = await fetchGeofences();
            displayGeofences(geofences);
        } catch (error) {
            console.error('Error al cargar tracks:', error);
            alert('No se pudieron cargar los tracks: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('filterForm').addEventListener('submit', event => {
        event.preventDefault();
        const imei = document.getElementById('imei').value;
        const beginTime = document.getElementById('beginTime').value
            ? Math.floor(new Date(document.getElementById('beginTime').value).getTime() / 1000)
            : null;
        const endTime = document.getElementById('endTime').value
            ? Math.floor(new Date(document.getElementById('endTime').value).getTime() / 1000)
            : null;
        fetchTracks(imei, beginTime, endTime);
    });

    // Load IMEI options and geofences on page load
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchImeis();
        const geofences = await fetchGeofences();
        displayGeofences(geofences);
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\view-geofences.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geofence Management</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; }
        table { width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Geofence Management</h1>

<div class="mb-4">
    <h2 class="text-xl mb-2">Create Geofence</h2>
    <form id="geofenceForm" class="space-y-2">
        <div>
            <label for="imei" class="block text-sm font-medium">IMEI (Device)</label>
            <select id="imei" class="border rounded p-1 w-full"></select>
        </div>
        <div>
            <label for="name" class="block text-sm font-medium">Name</label>
            <input type="text" id="name" class="border rounded p-1 w-full" required>
        </div>
        <div>
            <label for="alarmtype" class="block text-sm font-medium">Alarm Type (0: Out, 1: In, 2: In/Out)</label>
            <select id="alarmtype" class="border rounded p-1 w-full">
                <option value="0">Out</option>
                <option value="1">In</option>
                <option value="2">In/Out</option>
            </select>
        </div>
        <div>
            <label for="latitude" class="block text-sm font-medium">Latitude (Click on map to set)</label>
            <input type="number" id="latitude" class="border rounded p-1 w-full" readonly>
        </div>
        <div>
            <label for="longitude" class="block text-sm font-medium">Longitude (Click on map to set)</label>
            <input type="number" id="longitude" class="border rounded p-1 w-full" readonly>
        </div>
        <div>
            <label for="radius" class="block text-sm font-medium">Radius (100-5000 meters)</label>
            <input type="number" id="radius" class="border rounded p-1 w-full" min="100" max="5000" required>
        </div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create Geofence</button>
    </form>
</div>

<div id="map" class="mb-4"></div>

<h2 class="text-xl mb-2">Existing Geofences</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Name</th>
        <th>Alarm Type</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Radius</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    // Initialize Leaflet map
    const map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    let currentMarker = null;
    let currentCircle = null;

    // Click on map to set center
    map.on('click', function(e) {
        const lat = e.latlng.lat;
        const lon = e.latlng.lng;
        document.getElementById('latitude').value = lat;
        document.getElementById('longitude').value = lon;

        // Remove previous marker and circle
        if (currentMarker) map.removeLayer(currentMarker);
        if (currentCircle) map.removeLayer(currentCircle);

        // Add marker
        currentMarker = L.marker([lat, lon]).addTo(map);

        // Preview circle if radius is set
        const radius = parseInt(document.getElementById('radius').value);
        if (!isNaN(radius)) {
            currentCircle = L.circle([lat, lon], { radius }).addTo(map);
        }
    });

    // Update preview circle when radius changes
    document.getElementById('radius').addEventListener('input', function() {
        const radius = parseInt(this.value);
        const lat = parseFloat(document.getElementById('latitude').value);
        const lon = parseFloat(document.getElementById('longitude').value);

        if (!isNaN(radius) && !isNaN(lat) && !isNaN(lon)) {
            if (currentCircle) map.removeLayer(currentCircle);
            currentCircle = L.circle([lat, lon], { radius }).addTo(map);
        }
    });

    // Fetch devices for dropdown
    async function fetchDevices() {
        try {
            const response = await fetch('http://localhost:8080/api/devices');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error fetching devices:', error);
            alert('Failed to load devices: ' + error.message);
        }
    }

    // Fetch and display existing geofences
    async function fetchGeofences() {
        try {
            const response = await fetch('http://localhost:8080/api/geofences');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            data.forEach(geofence => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${geofence.id}</td>
                        <td>${geofence.imei}</td>
                        <td>${geofence.name}</td>
                        <td>${geofence.alarmtype}</td>
                        <td>${geofence.latitude}</td>
                        <td>${geofence.longitude}</td>
                        <td>${geofence.radius}</td>
                    `;
                tableBody.appendChild(row);

                // Draw circle on map
                L.circle([geofence.latitude, geofence.longitude], {
                    radius: geofence.radius,
                    color: 'blue',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`<b>${geofence.name}</b><br>IMEI: ${geofence.imei}<br>Alarm Type: ${geofence.alarmtype}`);
            });
        } catch (error) {
            console.error('Error fetching geofences:', error);
            alert('Failed to load geofences: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            latitude: parseFloat(document.getElementById('latitude').value),
            longitude: parseFloat(document.getElementById('longitude').value),
            radius: parseInt(document.getElementById('radius').value)
        };

        try {
            const response = await fetch('http://localhost:8080/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geofence created successfully');
                fetchGeofences(); // Refresh list and map
                this.reset(); // Reset form
                if (currentMarker) map.removeLayer(currentMarker);
                if (currentCircle) map.removeLayer(currentCircle);
            } else {
                alert('Error creating geofence: ' + await response.text());
            }
        } catch (error) {
            console.error('Error creating geofence:', error);
            alert('Error: ' + error.message);
        }
    });

    // Load devices and geofences on page load
    fetchDevices();
    fetchGeofences();
</script>
</body>
</html>

============================================================

=== ARCHIVO: java\com\example\fleetIq\web\view-geofences2.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Point Geofences View & Creator</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        // Check if Leaflet is loaded
        if (typeof L === 'undefined') {
            console.error('Leaflet failed to load. Check network tab.');
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 600px; width: 100%; display: block; }
        table { width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .form-container { margin-bottom: 20px; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Multi-Point Geofences View & Creator</h1>

<div class="form-container">
    <h2 class="text-xl mb-2">Create New Geofence</h2>
    <form id="geofenceForm" class="space-y-2">
        <div>
            <label for="imei" class="block text-sm font-medium">IMEI (Device)</label>
            <select id="imei" class="border rounded p-1 w-full" required>
                <!-- Populate dynamically -->
            </select>
        </div>
        <div>
            <label for="name" class="block text-sm font-medium">Name</label>
            <input type="text" id="name" class="border rounded p-1 w-full" required>
        </div>
        <div>
            <label for="alarmtype" class="block text-sm font-medium">Alarm Type</label>
            <select id="alarmtype" class="border rounded p-1 w-full" required>
                <option value="0">Out</option>
                <option value="1">In</option>
                <option value="2">In/Out</option>
            </select>
        </div>
        <div>
            <label class="block text-sm font-medium">Draw Polygon (Click to add points, double-click to finish)</label>
            <input type="hidden" id="points" name="points">
            <p id="pointsInfo" class="text-sm text-gray-500">Draw your polygon on the map below.</p>
        </div>
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Create Geofence</button>
    </form>
</div>

<div id="map" class="mb-4"></div>
<h2 class="text-xl mb-2">Geofence List</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Name</th>
        <th>Alarm Type</th>
        <th>Point Count</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    let map = null;
    let drawnItems = null;
    let drawControl = null;

    // Initialize map
    function initializeMap() {
        map = L.map('map').setView([-8.0, -79.0], 6); // Center on Peru
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        map.invalidateSize();
        console.log('Map initialized successfully');
    }

    // Initialize Leaflet Draw for polygons
    function initializeDrawControl() {
        if (!map) {
            console.error('Map is not initialized for Draw control');
            return;
        }
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        if (typeof L.Control.Draw === 'undefined') {
            console.error('Leaflet Draw failed to load. Check network tab.');
            return;
        }

        drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: {
                        color: '#e1e100',
                        message: '<strong>Oh snap!</strong> You can\'t draw that!'
                    },
                    shapeOptions: {
                        color: '#bada55'
                    }
                },
                polyline: false,
                circle: false,
                rectangle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: drawnItems,
                remove: false
            }
        });
        map.addControl(drawControl);

        map.on('draw:created', function (e) {
            const type = e.layerType;
            const layer = e.layer;

            if (type === 'polygon') {
                if (drawnItems.getLayers().length > 0) {
                    drawnItems.clearLayers(); // Remove previous polygon
                }
                drawnItems.addLayer(layer);
                const coords = layer.getLatLngs()[0].map(ll => [ll.lat, ll.lng]); // Get [lat, lon] array
                if (coords.length < 3) {
                    alert('Polygon must have at least 3 points.');
                    drawnItems.clearLayers();
                    return;
                }
                document.getElementById('points').value = JSON.stringify(coords); // Set hidden input
                document.getElementById('pointsInfo').textContent = `Polygon drawn with ${coords.length} points. Ready to submit.`;
            }
        });
    }

    // Fetch devices for dropdown
    async function fetchDevices() {
        try {
            const response = await fetch('http://localhost:8080/api/devices');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            select.innerHTML = ''; // Clear existing options
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error fetching devices:', error);
            alert('Failed to load devices: ' + error.message);
        }
    }

    // Fetch and display geofences
    async function fetchGeofences() {
        if (!map) {
            console.error('Map is not initialized');
            return;
        }
        try {
            const response = await fetch('http://localhost:8080/api/geofences');
            if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
            const geofences = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            // Clear existing polygons (except tile layer)
            map.eachLayer(layer => {
                if (layer instanceof L.Polygon) {
                    map.removeLayer(layer);
                }
            });

            const bounds = L.latLngBounds();

            geofences.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => [p[0], p[1]]); // Convert [lat, lon] arrays

                // Add row to table
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>${geofence.id}</td>
                        <td>${geofence.imei}</td>
                        <td>${geofence.name}</td>
                        <td>${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}</td>
                        <td>${points.length}</td>
                    `;
                tableBody.appendChild(row);

                // Add polygon to map
                const polygon = L.polygon(coords, {
                    color: 'yellow',
                    fillColor: 'yellow',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`
                        <b>${geofence.name}</b><br>
                        IMEI: ${geofence.imei}<br>
                        Alarm Type: ${geofence.alarmtype === 0 ? 'Out' : geofence.alarmtype === 1 ? 'In' : 'In/Out'}
                    `);

                bounds.extend(polygon.getBounds());
            });

            if (geofences.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error fetching geofences:', error);
            alert('Failed to load geofences: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const points = document.getElementById('points').value;
        if (!points || JSON.parse(points).length < 3) {
            alert('Please draw a polygon with at least 3 points.');
            return;
        }

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            points: points
        };

        try {
            const response = await fetch('http://localhost:8080/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geofence created successfully');
                this.reset();
                document.getElementById('pointsInfo').textContent = 'Draw your polygon on the map below.';
                if (drawnItems) {
                    drawnItems.clearLayers();
                }
                fetchGeofences(); // Refresh the display
            } else {
                const errorText = await response.text();
                alert('Error creating geofence: ' + errorText);
            }
        } catch (error) {
            console.error('Error creating geofence:', error);
            alert('Error: ' + error.message);
        }
    });

    // Initialize on load
    document.addEventListener('DOMContentLoaded', async () => {
        initializeMap();
        initializeDrawControl();
        await fetchDevices();
        await fetchGeofences();
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: resources\application.properties ===

spring.application.name=fleetIq
spring.datasource.url=jdbc:mysql://localhost:3306/fleetiq
spring.datasource.username=root
spring.datasource.password=mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#logging.level.org.springframework=DEBUG
#logging.level.org.hibernate=DEBUG
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=update

============================================================

=== ARCHIVO: resources\static\web\index2.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geocercas y Tracks</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="container bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Geocercas y Tracks</h1>

<div class="mb-4">
    <form id="filterForm" class="flex space-x-4">
        <div>
            <label for="imei" class="block text-sm font-medium">Seleccionar IMEI</label>
            <select id="imei" class="border rounded p-1">
                <!-- Populated dynamically -->
            </select>
        </div>
        <div>
            <label for="beginTime" class="block text-sm font-medium">Fecha Inicio (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="beginTime" class="border rounded p-1">
        </div>
        <div>
            <label for="endTime" class="block text-sm font-medium">Fecha Fin (YYYY-MM-DD HH:MM)</label>
            <input type="datetime-local" id="endTime" class="border rounded p-1">
        </div>
        <div style="align-self: flex-end;">
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Filtrar</button>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>

<table class="table-auto">
    <thead>
    <tr>
        <th>IMEI</th>
        <th>Fecha</th>
        <th>Latitud</th>
        <th>Longitud</th>
    </tr>
    </thead>
    <tbody id="deviceTable"></tbody>
</table>

<script>
    // Initialize Leaflet map
    const map = L.map('map').setView([-8.0, -79.0], 6); // Centro en Perú
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Store geofence layers to manage them
    let geofenceLayers = [];
    // Store track layers to manage them
    let trackLayers = [];

    // Generate random color for each device or geofence
    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    // Format Unix timestamp to local datetime
    function formatDate(timestamp) {
        return new Date(timestamp * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' });
    }

    // Fetch IMEIs for dropdown
    async function fetchImeis() {
        try {
            const response = await fetch('/api/devices');
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const devices = await response.json();

            const select = document.getElementById('imei');
            select.innerHTML = '';

            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Seleccionar IMEI';
            select.appendChild(defaultOption);

            devices.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = device.imei;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar IMEIs:', error);
            alert('No se pudieron cargar los IMEIs: ' + error.message);
        }
    }

    // Fetch geofences from the API
    async function fetchGeofences() {
        try {
            const response = await fetch('/api/geofences');
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const geofences = await response.json();
            return geofences;
        } catch (error) {
            console.error('Error al cargar geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
            return [];
        }
    }

    // Display geofences on the map
    function displayGeofences(geofences) {
        geofenceLayers.forEach(layer => map.removeLayer(layer));
        geofenceLayers = [];

        geofences.forEach(geofence => {
            const { name, points, alarmtype } = geofence;

            let pointsArray;
            try {
                pointsArray = typeof points === 'string' ? JSON.parse(points) : points;
            } catch (e) {
                console.error('Error al parsear puntos de geocerca:', e);
                return;
            }

            if (!Array.isArray(pointsArray) || pointsArray.length === 0) {
                console.error('Geocerca con puntos inválidos:', geofence);
                return;
            }

            const color = getRandomColor();
            const geofencePolygon = L.polygon(pointsArray, {
                color: color,
                fillColor: color,
                fillOpacity: 0.2
            }).addTo(map);

            geofencePolygon.bindPopup(`
                <b>Geocerca: ${name}</b><br>
                Tipo: ${alarmtype === 1 ? 'Entrada' : 'Salida'}<br>
                Puntos: ${pointsArray.length}
            `);

            geofenceLayers.push(geofencePolygon);
        });
    }

    // Clear all track layers from map
    function clearTrackLayers() {
        trackLayers.forEach(layer => map.removeLayer(layer));
        trackLayers = [];
    }

    // Fetch and display tracks for selected IMEI
    async function fetchTracks(imei, beginTime, endTime) {
        if (!imei) {
            alert('Por favor seleccione un IMEI');
            return;
        }

        const url = new URL('/api/tracks', window.location.origin);
        url.searchParams.append('imei', imei);
        if (beginTime) url.searchParams.append('beginTime', beginTime);
        if (endTime) url.searchParams.append('endTime', endTime);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Error HTTP! estado: ${response.status}`);
            }
            const data = await response.json();

            clearTrackLayers();

            if (data && data.length > 0) {
                const color = getRandomColor();
                const coords = data.map(track => {
                    if (track.latitude === undefined || track.longitude === undefined ||
                        isNaN(track.latitude) || isNaN(track.longitude)) {
                        console.error('Track con coordenadas inválidas:', track);
                        return null;
                    }
                    return [track.latitude, track.longitude];
                }).filter(coord => coord !== null);

                if (coords.length > 0) {
                    const polyline = L.polyline(coords, { color }).addTo(map);
                    trackLayers.push(polyline);

                    data.forEach(track => {
                        if (track.latitude !== undefined && track.longitude !== undefined &&
                            !isNaN(track.latitude) && !isNaN(track.longitude)) {
                            const marker = L.marker([track.latitude, track.longitude])
                                .addTo(map)
                                .bindPopup(`
                                    <b>IMEI: ${imei}</b><br>
                                    Fecha: ${formatDate(track.gpstime)}<br>
                                    Latitud: ${track.latitude}<br>
                                    Longitud: ${track.longitude}
                                `);
                            trackLayers.push(marker);
                        }
                    });

                    map.fitBounds(coords);
                }
            }

            const tableBody = document.getElementById('deviceTable');
            tableBody.innerHTML = '';

            if (data && data.length > 0) {
                data.forEach(track => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${imei}</td>
                        <td>${formatDate(track.gpstime)}</td>
                        <td>${track.latitude !== undefined ? track.latitude : 'N/A'}</td>
                        <td>${track.longitude !== undefined ? track.longitude : 'N/A'}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="4" class="text-center">No se encontraron datos para el IMEI seleccionado</td>`;
                tableBody.appendChild(row);
            }

            const geofences = await fetchGeofences();
            displayGeofences(geofences);
        } catch (error) {
            console.error('Error al cargar tracks:', error);
            alert('No se pudieron cargar los tracks: ' + error.message);
        }
    }

    // Handle form submission
    document.getElementById('filterForm').addEventListener('submit', event => {
        event.preventDefault();
        const imei = document.getElementById('imei').value;
        const beginTime = document.getElementById('beginTime').value
            ? Math.floor(new Date(document.getElementById('beginTime').value).getTime() / 1000)
            : null;
        const endTime = document.getElementById('endTime').value
            ? Math.floor(new Date(document.getElementById('endTime').value).getTime() / 1000)
            : null;
        fetchTracks(imei, beginTime, endTime);
    });

    // Load IMEI options and geofences on page load
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchImeis();
        const geofences = await fetchGeofences();
        displayGeofences(geofences);
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: resources\static\web\vertablas.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualización de Tablas</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 500px; display: none; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .pagination { margin-top: 10px; }
        .pagination button { margin: 0 5px; padding: 5px 10px; }
        textarea { width: 100%; height: 100px; resize: vertical; margin-top: 5px; }
    </style>
</head>
<body class="container bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Visualización de Tablas</h1>

<div class="mb-4">
    <form id="filterForm" class="flex space-x-4">
        <div>
            <label for="tableName" class="block text-sm font-medium">Seleccionar Tabla</label>
            <select id="tableName" class="border rounded p-1 w-full">
                <!-- Populated dynamically -->
            </select>
            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mt-2">Cargar</button>
            <button id="exportButton" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mt-2" style="display:none;">Descargar Excel</button>
        </div>
        <div>
            <label for="queryInput" class="block text-sm font-medium mt-2">Query SQL Personalizado</label>
            <textarea id="queryInput" placeholder="Escribe tu query SQL aquí (e.g., SELECT * FROM alarms LIMIT 10)" class="border rounded p-1"></textarea>
            <button id="consultQueryBtn" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 mt-2">Consultar Query</button>
        </div>
    </form>
</div>

<table class="table-auto">
    <thead>
    <tr>
        <th>Columna</th> <!-- Dinámico -->
    </tr>
    </thead>
    <tbody id="tableBody"></tbody>
</table>
<div id="error" class="text-red-500" style="display:none;"></div>
<div id="pagination" class="pagination" style="display:none;"></div>

<script>
    let currentPage = 0;
    let totalPages = 0;
    let currentTableName = '';

    // Fetch tables for dropdown with absolute URL
    async function fetchTables() {
        try {
            const response = await fetch('/api/tables/data', { mode: 'cors' });
            if (!response.ok) throw new Error(`Error HTTP! estado: ${response.status}`);
            const data = await response.json();
            console.log('Tablas recibidas:', data.tables);

            const select = document.getElementById('tableName');
            select.innerHTML = '<option value="">Selecciona tabla</option>';
            if (data.tables && data.tables.length > 0) {
                data.tables.forEach(table => {
                    const option = document.createElement('option');
                    option.value = table;
                    option.textContent = table;
                    select.appendChild(option);
                });
            } else {
                const option = document.createElement('option');
                option.value = '';
                option.textContent = 'No hay tablas disponibles';
                option.disabled = true;
                select.appendChild(option);
            }
        } catch (error) {
            console.error('Error al cargar tablas:', error);
            document.getElementById('error').textContent = 'Error al cargar tablas: ' + error.message;
            document.getElementById('error').style.display = 'block';
        }
    }

    // Fetch and display table data with absolute URL
    async function fetchTableData(tableName, page = 0) {
        if (!tableName) return;
        currentTableName = tableName;
        const url = `/api/tables/data?tableName=${encodeURIComponent(tableName)}&page=${page}&size=50`;
        try {
            const response = await fetch(url, { mode: 'cors' });
            if (!response.ok) throw new Error(`Error HTTP! estado: ${response.status}`);
            const data = await response.json();
            console.log('Datos recibidos:', data);

            const tableBody = document.getElementById('tableBody');
            const errorDiv = document.getElementById('error');
            const paginationDiv = document.getElementById('pagination');
            const exportButton = document.getElementById('exportButton');

            tableBody.innerHTML = '';
            errorDiv.style.display = 'none';
            paginationDiv.style.display = 'none';
            exportButton.style.display = 'none';

            if (data.error) {
                errorDiv.textContent = data.error;
                errorDiv.style.display = 'block';
            } else if (data.data && data.data.length > 0) {
                const columns = Object.keys(data.data[0]);
                const thead = document.querySelector('thead tr');
                thead.innerHTML = columns.map(col => `<th>${col}</th>`).join('');

                data.data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = columns.map(col => `<td>${row[col] || ''}</td>`).join('');
                    tableBody.appendChild(tr);
                });

                currentPage = data.page;
                const total = data.total || 0;
                totalPages = Math.ceil(total / 50);
                updatePagination();
                exportButton.style.display = 'inline-block';
            } else {
                const tr = document.createElement('tr');
                tr.innerHTML = '<td colspan="100%">No se encontraron datos</td>';
                tableBody.appendChild(tr);
            }
        } catch (error) {
            console.error('Error al cargar datos:', error);
            document.getElementById('error').textContent = 'Error al cargar datos: ' + error.message;
            document.getElementById('error').style.display = 'block';
        }
    }

    // Actualizar controles de paginación
    function updatePagination() {
        const paginationDiv = document.getElementById('pagination');
        paginationDiv.innerHTML = '';
        paginationDiv.style.display = totalPages > 1 ? 'block' : 'none';

        const prevButton = document.createElement('button');
        prevButton.textContent = 'Anterior';
        prevButton.disabled = currentPage === 0;
        prevButton.addEventListener('click', () => fetchTableData(currentTableName, currentPage - 1));
        paginationDiv.appendChild(prevButton);

        for (let i = 0; i < totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i + 1;
            pageButton.disabled = i === currentPage;
            pageButton.addEventListener('click', () => fetchTableData(currentTableName, i));
            paginationDiv.appendChild(pageButton);
        }

        const nextButton = document.createElement('button');
        nextButton.textContent = 'Siguiente';
        nextButton.disabled = currentPage === totalPages - 1;
        nextButton.addEventListener('click', () => fetchTableData(currentTableName, currentPage + 1));
        paginationDiv.appendChild(nextButton);
    }

    // Manejar descarga de Excel
    document.getElementById('exportButton').addEventListener('click', () => {
        if (currentTableName) {
            window.location.href = `/api/tables/export?tableName=${encodeURIComponent(currentTableName)}`;
        }
    });

    // Handle form submission para cargar tabla
    document.getElementById('filterForm').addEventListener('submit', event => {
        event.preventDefault();
        const tableName = document.getElementById('tableName').value;
        fetchTableData(tableName, 0);
    });

    // Ejecutar consulta personalizada
    document.getElementById('consultQueryBtn').addEventListener('click', async () => {
        const query = document.getElementById('queryInput').value.trim();
        if (!query) {
            alert('Escribe un query SQL');
            return;
        }

        try {
            const response = await fetch('/api/query/execute', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Error en el servidor');
            }
            const data = await response.json();
            displayQueryResults(data.data);
            document.getElementById('error').style.display = 'none';
            document.getElementById('pagination').style.display = 'none'; // Ocultar paginación para queries
            document.getElementById('exportButton').style.display = 'none'; // Ocultar botón de exportación
        } catch (error) {
            console.error('Error al ejecutar query:', error);
            document.getElementById('error').textContent = 'Error al ejecutar query: ' + error.message;
            document.getElementById('error').style.display = 'block';
        }
    });

    // Mostrar resultados de consulta personalizada
    function displayQueryResults(data) {
        const tableBody = document.getElementById('tableBody');
        const thead = document.querySelector('thead tr');
        tableBody.innerHTML = '';

        if (data && data.length > 0) {
            const columns = Object.keys(data[0]);
            thead.innerHTML = columns.map(col => `<th>${col}</th>`).join('');

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = columns.map(col => `<td>${row[col] || ''}</td>`).join('');
                tableBody.appendChild(tr);
            });
        } else {
            thead.innerHTML = '<th>No se encontraron datos</th>';
            const tr = document.createElement('tr');
            tr.innerHTML = '<td>No se encontraron datos</td>';
            tableBody.appendChild(tr);
        }
    }

    // Load tables on page load
    document.addEventListener('DOMContentLoaded', fetchTables);
</script>
</body>
</html>

============================================================

=== ARCHIVO: resources\static\web\view-geofences-alarms.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualización de Alarmas y Geocercas</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        if (typeof L === 'undefined') {
            console.error('Leaflet no se cargó correctamente. Revisa la pestaña de red.');
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 600px; width: 100%; display: block; }
        table { width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .form-container { margin-bottom: 20px; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Visualización de Alarmas y Geocercas</h1>

<div class="form-container">
    <h2 class="text-xl mb-2">Filtrar Alarmas por IMEI, Fechas y Horas</h2>
    <form id="filterForm" class="space-y-2 mb-4">
        <div class="flex flex-row flex-wrap gap-2">
            <div class="w-1/4">
                <label for="imeiFilter" class="block text-sm font-medium">IMEI</label>
                <select id="imeiFilter" class="border rounded p-1 w-full" required>
                    <option value="">Todos</option>
                    <!-- Opciones de IMEI se llenarán dinámicamente -->
                </select>
            </div>
            <div class="w-1/4">
                <label for="startDateTime" class="block text-sm font-medium">Fecha y Hora Inicio</label>
                <input type="datetime-local" id="startDateTime" class="border rounded p-1 w-full">
            </div>
            <div class="w-1/4">
                <label for="endDateTime" class="block text-sm font-medium">Fecha y Hora Fin</label>
                <input type="datetime-local" id="endDateTime" class="border rounded p-1 w-full">
            </div>
            <div class="w-1/4 flex items-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Filtrar</button>
            </div>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>

<h2 class="text-xl mb-2">Lista de Geocercas</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Nombre</th>
        <th>Tipo de Alarma</th>
        <th>Cantidad de Puntos</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<h2 class="text-xl mb-2">Lista de Alarmas</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Geofence ID</th>
        <th>Track Time</th>
        <th>Entry Time</th>
        <th>Exit Time</th>
        <th>Alarm Type</th>
        <th>Duration (s)</th>
        <th>Latitude</th>
        <th>Longitude</th>
    </tr>
    </thead>
    <tbody id="alarmTable"></tbody>
</table>

<script>
    let map = null;
    let drawnItems = null;
    let drawControl = null;

    function initializeMap() {
        map = L.map('map').setView([-8.0, -79.0], 6);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        map.invalidateSize();
        console.log('Mapa inicializado correctamente');
    }

    function initializeDrawControl() {
        if (!map) {
            console.error('El mapa no está inicializado para el control de dibujo');
            return;
        }
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        if (typeof L.Control.Draw === 'undefined') {
            console.error('Leaflet Draw no se cargó correctamente. Revisa la pestaña de red.');
            return;
        }

        drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: { color: '#e1e100', message: '<strong>¡Error!</strong> No puedes dibujar eso.' },
                    shapeOptions: { color: '#bada55' }
                },
                polyline: false,
                circle: false,
                rectangle: false,
                marker: false,
                circlemarker: false
            },
            edit: { featureGroup: drawnItems, remove: false }
        });
        map.addControl(drawControl);

        map.on('draw:created', function (e) {
            const type = e.layerType;
            const layer = e.layer;

            if (type === 'polygon') {
                if (drawnItems.getLayers().length > 0) {
                    drawnItems.clearLayers();
                }
                drawnItems.addLayer(layer);
                const coords = layer.getLatLngs()[0].map(ll => [ll.lat, ll.lng]);
                if (coords.length < 3) {
                    alert('El polígono debe tener al menos 3 puntos.');
                    drawnItems.clearLayers();
                    return;
                }
                document.getElementById('points').value = JSON.stringify(coords);
                document.getElementById('pointsInfo').textContent = `Polígono dibujado con ${coords.length} puntos. Listo para enviar.`;
            }
        });
    }

    async function fetchGeofences() {
        if (!map) {
            console.error('El mapa no está inicializado');
            return;
        }
        try {
            const response = await fetch('/api/geofences');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const geofences = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            map.eachLayer(layer => {
                if (layer instanceof L.Polygon) {
                    map.removeLayer(layer);
                }
            });

            const bounds = L.latLngBounds();

            geofences.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => [p[0], p[1]]);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${geofence.id}</td>
                    <td>${geofence.imei}</td>
                    <td>${geofence.name}</td>
                    <td>${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}</td>
                    <td>${points.length}</td>
                `;
                tableBody.appendChild(row);

                const polygon = L.polygon(coords, {
                    color: 'yellow',
                    fillColor: 'yellow',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`
                    <b>${geofence.name}</b><br>
                    IMEI: ${geofence.imei}<br>
                    Tipo de Alarma: ${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}
                `);

                bounds.extend(polygon.getBounds());
            });

            if (geofences.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error al obtener geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
        }
    }

    async function fetchUniqueImeis() {
        try {
            const response = await fetch('/api/alarms');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const alarms = await response.json();
            const imeis = [...new Set(alarms.map(alarm => alarm.imei))].sort();
            const select = document.getElementById('imeiFilter');
            imeis.forEach(imei => {
                const option = document.createElement('option');
                option.value = imei;
                option.textContent = imei;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al obtener IMEIs:', error);
            alert('No se pudieron cargar los IMEIs: ' + error.message);
        }
    }

    async function fetchAlarms(imei, startDateTime, endDateTime) {
        try {
            const url = new URL('/api/alarms', window.location.origin);
            if (imei && imei !== "") url.searchParams.append('imei', imei);
            if (startDateTime) url.searchParams.append('startDateTime', startDateTime);
            if (endDateTime) url.searchParams.append('endDateTime', endDateTime);

            const response = await fetch(url);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const alarms = await response.json();

            // Clear existing markers
            map.eachLayer(layer => {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            const tableBody = document.getElementById('alarmTable');
            tableBody.innerHTML = '';

            alarms.forEach(alarm => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${alarm.id}</td>
                    <td>${alarm.imei}</td>
                    <td>${alarm.geofenceId}</td>
                    <td>${new Date(alarm.trackTime * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' })}</td>
                    <td>${alarm.entryTime ? new Date(alarm.entryTime * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' }) : 'N/A'}</td>
                    <td>${alarm.exitTime ? new Date(alarm.exitTime * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' }) : 'N/A'}</td>
                    <td>${alarm.alarmType}</td>
                    <td>${alarm.duration || 'N/A'}</td>
                    <td>${alarm.latitude}</td>
                    <td>${alarm.longitude}</td>
                `;
                tableBody.appendChild(row);

                if (alarm.latitude && alarm.longitude) {
                    L.marker([alarm.latitude, alarm.longitude]).addTo(map)
                        .bindPopup(`
                            <b>Alarma ID: ${alarm.id}</b><br>
                            IMEI: ${alarm.imei}<br>
                            Tipo: ${alarm.alarmType}<br>
                            Duración: ${alarm.duration || 'N/A'} s<br>
                            Hora de Entrada: ${alarm.entryTime ? new Date(alarm.entryTime * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' }) : 'N/A'}<br>
                            Hora de Salida: ${alarm.exitTime ? new Date(alarm.exitTime * 1000).toLocaleString('es-PE', { timeZone: 'America/Lima' }) : 'N/A'}
                        `);
                }
            });
        } catch (error) {
            console.error('Error al obtener alarmas:', error);
            alert('No se pudieron cargar las alarmas: ' + error.message);
        }
    }

    document.getElementById('filterForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        const imei = document.getElementById('imeiFilter').value;
        const startDateTime = document.getElementById('startDateTime').value;
        const endDateTime = document.getElementById('endDateTime').value;
        await fetchAlarms(imei, startDateTime, endDateTime);
    });

    // Set default dates to today
    document.addEventListener('DOMContentLoaded', async () => {
        const today = new Date().toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:MM
        document.getElementById('startDateTime').value = today;
        document.getElementById('endDateTime').value = today;

        initializeMap();
        initializeDrawControl();
        await fetchGeofences();
        await fetchUniqueImeis(); // Llenar el dropdown con IMEIs
        await fetchAlarms(""); // Cargar todas las alarmas al inicio
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: resources\static\web\view-geofences-gmaps.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualización y Creación de Geocercas</title>
    <style>
        #map { height: 600px; width: 100%; display: block; }
        table { width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing&async" defer></script>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Visualización y Creación de Geocercas</h1>

<div class="form-container">
    <h2 class="text-xl mb-2">Crear Nueva Geofence</h2>
    <form id="geofenceForm" class="space-y-2">
        <div class="flex flex-row flex-wrap gap-2">
            <div class="w-1/4">
                <label for="imei" class="block text-sm font-medium">IMEI (Dispositivo)</label>
                <select id="imei" class="border rounded p-1 w-full" required>
                    <!-- Populated dynamically -->
                </select>
            </div>
            <div class="w-1/4">
                <label for="name" class="block text-sm font-medium">Nombre</label>
                <input type="text" id="name" class="border rounded p-1 w-full" required>
            </div>
            <div class="w-1/4">
                <label for="alarmtype" class="block text-sm font-medium">Tipo de Alarma</label>
                <select id="alarmtype" class="border rounded p-1 w-full" required>
                    <option value="0">Salida</option>
                    <option value="1">Entrada</option>
                    <option value="2">Entrada/Salida</option>
                </select>
            </div>
            <div class="w-1/4 flex items-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Crear Geocerca</button>
            </div>
        </div>
        <div class="mt-2">
            <label class="block text-sm font-medium">Dibujar Polígono (Haz clic para agregar puntos, doble clic para finalizar)</label>
            <input type="hidden" id="points" name="points">
            <p id="pointsInfo" class="text-sm text-gray-500">Dibuja tu polígono en el mapa de abajo.</p>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>
<h2 class="text-xl mb-2">Lista de Geocercas</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Nombre</th>
        <th>Tipo de Alarma</th>
        <th>Cantidad de Puntos</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    let map = null;
    let drawingManager = null;
    let selectedShape = null;

    function initializeMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -8.0, lng: -79.0 },
            zoom: 6,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        const mapTypeControl = new google.maps.MapTypeControl();
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(mapTypeControl);

        map.mapTypes.set('hybrid', new google.maps.ImageMapType({
            getTileUrl: function(coord, zoom) {
                return `https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/${zoom}/${coord.y}/${coord.x}`;
            },
            tileSize: new google.maps.Size(256, 256),
            name: 'Híbrido',
            maxZoom: 19
        }));

        mapTypeControl.setMap(map);
        console.log('Mapa inicializado correctamente');
    }

    function initializeDrawControl() {
        if (!map) {
            console.error('El mapa no está inicializado para el control de dibujo');
            return;
        }

        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [google.maps.drawing.OverlayType.POLYGON]
            },
            polygonOptions: {
                editable: true,
                draggable: true,
                fillColor: '#bada55',
                fillOpacity: 0.2,
                strokeWeight: 2,
                clickable: true,
                zIndex: 1
            }
        });
        drawingManager.setMap(map);

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
            if (event.type === google.maps.drawing.OverlayType.POLYGON) {
                if (selectedShape) {
                    selectedShape.setMap(null);
                }
                selectedShape = event.overlay;
                const coords = selectedShape.getPath().getArray().map(latLng => [latLng.lat(), latLng.lng()]);
                if (coords.length < 3) {
                    alert('El polígono debe tener al menos 3 puntos.');
                    selectedShape.setMap(null);
                    selectedShape = null;
                    return;
                }
                document.getElementById('points').value = JSON.stringify(coords);
                document.getElementById('pointsInfo').textContent = `Polígono dibujado con ${coords.length} puntos. Listo para enviar.`;
            }
        });
    }

    async function fetchDevices() {
        try {
            const response = await fetch('/api/devices');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            select.innerHTML = '';
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al obtener dispositivos:', error);
            alert('No se pudieron cargar los dispositivos: ' + error.message);
        }
    }

    async function fetchGeofences() {
        if (!map) {
            console.error('El mapa no está inicializado');
            return;
        }
        try {
            const response = await fetch('/api/geofences');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const geofences = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            geofences.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => ({ lat: p[0], lng: p[1] }));

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${geofence.id}</td>
                    <td>${geofence.imei}</td>
                    <td>${geofence.name}</td>
                    <td>${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}</td>
                    <td>${points.length}</td>
                `;
                tableBody.appendChild(row);

                const polygon = new google.maps.Polygon({
                    paths: coords,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });
                polygon.setMap(map);

                const bounds = new google.maps.LatLngBounds();
                coords.forEach(coord => bounds.extend(coord));
                map.fitBounds(bounds);

                const infoWindow = new google.maps.InfoWindow({
                    content: `
                        <b>${geofence.name}</b><br>
                        IMEI: ${geofence.imei}<br>
                        Tipo de Alarma: ${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}
                    `
                });
                polygon.addListener('click', () => infoWindow.open(map, polygon));
            });
        } catch (error) {
            console.error('Error al obtener geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
        }
    }

    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const points = document.getElementById('points').value;
        if (!points || JSON.parse(points).length < 3) {
            alert('Por favor dibuja un polígono con al menos 3 puntos.');
            return;
        }

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            points: points
        };

        try {
            const response = await fetch('/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geocerca creada exitosamente');
                this.reset();
                document.getElementById('pointsInfo').textContent = 'Dibuja tu polígono en el mapa de abajo.';
                if (selectedShape) {
                    selectedShape.setMap(null);
                    selectedShape = null;
                }
                fetchGeofences();
            } else {
                const errorText = await response.text();
                alert('Error al crear la geocerca: ' + errorText);
            }
        } catch (error) {
            console.error('Error al crear la geocerca:', error);
            alert('Error: ' + error.message);
        }
    });

    document.addEventListener('DOMContentLoaded', async () => {
        initializeMap();
        initializeDrawControl();
        await fetchDevices();
        await fetchGeofences();
    });
</script>
</body>
</html>

============================================================

=== ARCHIVO: resources\static\web\view-geofences2.html ===

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visualización y Creación de Geocercas</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        if (typeof L === 'undefined') {
            console.error('Leaflet no se cargó correctamente. Revisa la pestaña de red.');
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        #map { height: 600px; width: 100%; display: block; }
        table { width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body class="p-4 bg-gray-100">
<h1 class="text-2xl font-bold mb-4">Visualización y Creación de Geocercas</h1>

<div class="form-container">
    <h2 class="text-xl mb-2">Crear Nueva Geocerca</h2>
    <form id="geofenceForm" class="space-y-2">
        <div class="flex flex-row flex-wrap gap-2">
            <div class="w-1/4">
                <label for="imei" class="block text-sm font-medium">IMEI (Dispositivo)</label>
                <select id="imei" class="border rounded p-1 w-full" required>
                    <!-- Populated dynamically -->
                </select>
            </div>
            <div class="w-1/4">
                <label for="name" class="block text-sm font-medium">Nombre</label>
                <input type="text" id="name" class="border rounded p-1 w-full" required>
            </div>
            <div class="w-1/4">
                <label for="alarmtype" class="block text-sm font-medium">Tipo de Alarma</label>
                <select id="alarmtype" class="border rounded p-1 w-full" required>
                    <option value="0">Salida</option>
                    <option value="1">Entrada</option>
                    <option value="2">Entrada/Salida</option>
                </select>
            </div>
            <div class="w-1/4 flex items-end">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Crear Geocerca</button>
            </div>
        </div>
        <div class="mt-2">
            <label class="block text-sm font-medium">Dibujar Polígono (Haz clic para agregar puntos, doble clic para finalizar)</label>
            <input type="hidden" id="points" name="points">
            <p id="pointsInfo" class="text-sm text-gray-500">Dibuja tu polígono en el mapa de abajo.</p>
        </div>
    </form>
</div>

<div id="map" class="mb-4"></div>
<h2 class="text-xl mb-2">Lista de Geocercas</h2>
<table class="table-auto">
    <thead>
    <tr>
        <th>ID</th>
        <th>IMEI</th>
        <th>Nombre</th>
        <th>Tipo de Alarma</th>
        <th>Cantidad de Puntos</th>
    </tr>
    </thead>
    <tbody id="geofenceTable"></tbody>
</table>

<script>
    let map = null;
    let drawnItems = null;
    let drawControl = null;

    function initializeMap() {
        map = L.map('map').setView([-8.0, -79.0], 6);

        // Capa de calles (OpenStreetMap)
        const streetLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        });

        // Capa satelital (Esri.WorldImagery)
        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
        });

        // Control de capas para alternar entre mapas
        L.control.layers({
            "Mapa de Calles": streetLayer,
            "Satélite": satelliteLayer
        }, {}).addTo(map);

        // Establecer la capa de calles como predeterminada
        streetLayer.addTo(map);

        map.invalidateSize();
        console.log('Mapa inicializado correctamente');
    }

    function initializeDrawControl() {
        if (!map) {
            console.error('El mapa no está inicializado para el control de dibujo');
            return;
        }
        drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        if (typeof L.Control.Draw === 'undefined') {
            console.error('Leaflet Draw no se cargó correctamente. Revisa la pestaña de red.');
            return;
        }

        drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: { color: '#e1e100', message: '<strong>¡Error!</strong> No puedes dibujar eso.' },
                    shapeOptions: { color: '#bada55' }
                },
                polyline: false,
                circle: false,
                rectangle: false,
                marker: false,
                circlemarker: false
            },
            edit: { featureGroup: drawnItems, remove: false }
        });
        map.addControl(drawControl);

        map.on('draw:created', function (e) {
            const type = e.layerType;
            const layer = e.layer;

            if (type === 'polygon') {
                if (drawnItems.getLayers().length > 0) {
                    drawnItems.clearLayers();
                }
                drawnItems.addLayer(layer);
                const coords = layer.getLatLngs()[0].map(ll => [ll.lat, ll.lng]);
                if (coords.length < 3) {
                    alert('El polígono debe tener al menos 3 puntos.');
                    drawnItems.clearLayers();
                    return;
                }
                document.getElementById('points').value = JSON.stringify(coords);
                document.getElementById('pointsInfo').textContent = `Polígono dibujado con ${coords.length} puntos. Listo para enviar.`;
            }
        });
    }

    async function fetchDevices() {
        try {
            const response = await fetch('/api/devices');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const data = await response.json();
            const select = document.getElementById('imei');
            select.innerHTML = '';
            data.forEach(device => {
                const option = document.createElement('option');
                option.value = device.imei;
                option.textContent = `${device.deviceName} (${device.imei})`;
                select.appendChild(option);
            });
        } catch (error) {
            console.error('Error al obtener dispositivos:', error);
            alert('No se pudieron cargar los dispositivos: ' + error.message);
        }
    }

    async function fetchGeofences() {
        if (!map) {
            console.error('El mapa no está inicializado');
            return;
        }
        try {
            const response = await fetch('/api/geofences');
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);
            const geofences = await response.json();

            const tableBody = document.getElementById('geofenceTable');
            tableBody.innerHTML = '';

            map.eachLayer(layer => {
                if (layer instanceof L.Polygon) {
                    map.removeLayer(layer);
                }
            });

            const bounds = L.latLngBounds();

            geofences.forEach(geofence => {
                const points = JSON.parse(geofence.points);
                const coords = points.map(p => [p[0], p[1]]);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${geofence.id}</td>
                    <td>${geofence.imei}</td>
                    <td>${geofence.name}</td>
                    <td>${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}</td>
                    <td>${points.length}</td>
                `;
                tableBody.appendChild(row);

                const polygon = L.polygon(coords, {
                    color: 'yellow',
                    fillColor: 'yellow',
                    fillOpacity: 0.2
                }).addTo(map).bindPopup(`
                    <b>${geofence.name}</b><br>
                    IMEI: ${geofence.imei}<br>
                    Tipo de Alarma: ${geofence.alarmtype === 0 ? 'Salida' : geofence.alarmtype === 1 ? 'Entrada' : 'Entrada/Salida'}
                `);

                bounds.extend(polygon.getBounds());
            });

            if (geofences.length > 0) {
                map.fitBounds(bounds);
            }
        } catch (error) {
            console.error('Error al obtener geocercas:', error);
            alert('No se pudieron cargar las geocercas: ' + error.message);
        }
    }

    document.getElementById('geofenceForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const points = document.getElementById('points').value;
        if (!points || JSON.parse(points).length < 3) {
            alert('Por favor dibuja un polígono con al menos 3 puntos.');
            return;
        }

        const geofence = {
            imei: document.getElementById('imei').value,
            name: document.getElementById('name').value,
            alarmtype: parseInt(document.getElementById('alarmtype').value),
            points: points
        };

        try {
            const response = await fetch('/api/geofences', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(geofence)
            });
            if (response.ok) {
                alert('Geocerca creada exitosamente');
                this.reset();
                document.getElementById('pointsInfo').textContent = 'Dibuja tu polígono en el mapa de abajo.';
                if (drawnItems) {
                    drawnItems.clearLayers();
                }
                fetchGeofences();
            } else {
                const errorText = await response.text();
                alert('Error al crear la geocerca: ' + errorText);
            }
        } catch (error) {
            console.error('Error al crear la geocerca:', error);
            alert('Error: ' + error.message);
        }
    });

    document.addEventListener('DOMContentLoaded', async () => {
        initializeMap();
        initializeDrawControl();
        await fetchDevices();
        await fetchGeofences();
    });
</script>
</body>
</html>

============================================================

